{"posts":[{"title":"Demo","text":"Demo ToDo Demo ToDo2","link":"/2020/10/10/Demo/"},{"title":"VSCode配置快捷键为JetBransIDEA的","text":"用惯了JetBrains IDEA的快捷键，现在需要用VS Code开发， 这里介绍如何把VS Code的快捷键设置为和IDEA相同的 步骤一：VSCode安装IntelliJ IDEA Keybindings插件安装好后，有一部分快捷键就已经和IDEA相同了 步骤二：导出IDEA的快捷键在IDEA的导出配置那块选择，参考：https://www.cnblogs.com/VoxBlog/p/16036599.html 步骤三：在VSCode导入IDEA的快捷键启动vscode的命令行：Import IntelliJ Keybindngs (XML) 步骤四：手动编辑没有同步到的快捷键如果IDEA的快捷键和VSCode有冲突，便不会生效，这时候手动改下，让自己用着顺手最重要。 下面是我的配置：{ &quot;command&quot;: &quot;editor.action.clipboardCopyAction&quot;, &quot;key&quot;: &quot;cmd+c&quot; }, { &quot;command&quot;: &quot;editor.action.clipboardCutAction&quot;, &quot;key&quot;: &quot;cmd+x&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;editor.action.clipboardCutAction&quot;, &quot;key&quot;: &quot;shift+delete&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;editor.action.clipboardPasteAction&quot;, &quot;key&quot;: &quot;cmd+v&quot; }, { &quot;command&quot;: &quot;redo&quot;, &quot;key&quot;: &quot;shift+cmd+z&quot; }, { &quot;command&quot;: &quot;redo&quot;, &quot;key&quot;: &quot;shift+alt+backspace&quot; }, { &quot;command&quot;: &quot;undo&quot;, &quot;key&quot;: &quot;cmd+z&quot; }, { &quot;command&quot;: &quot;workbench.view.debug&quot;, &quot;key&quot;: &quot;cmd+5&quot; }, { &quot;command&quot;: &quot;workbench.action.navigateBack&quot;, &quot;key&quot;: &quot;cmd+[&quot;, &quot;when&quot;: &quot;canNavigateBack&quot; }, { &quot;command&quot;: &quot;workbench.action.navigateBack&quot;, &quot;key&quot;: &quot;cmd+alt+left&quot;, &quot;when&quot;: &quot;canNavigateBack&quot; }, { &quot;command&quot;: &quot;references-view.showCallHierarchy&quot;, &quot;key&quot;: &quot;ctrl+alt+h&quot;, &quot;when&quot;: &quot;editorHasCallHierarchyProvider&quot; }, { &quot;command&quot;: &quot;git.commitAll&quot;, &quot;key&quot;: &quot;cmd+k&quot;, &quot;when&quot;: &quot;!inDebugMode &amp;&amp; !terminalFocus&quot; }, { &quot;command&quot;: &quot;workbench.view.debug&quot;, &quot;key&quot;: &quot;ctrl+alt+d&quot; }, { &quot;command&quot;: &quot;editor.action.triggerSuggest&quot;, &quot;key&quot;: &quot;ctrl+space&quot;, &quot;when&quot;: &quot;editorHasCompletionItemProvider &amp;&amp; textInputFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;editor.foldAll&quot;, &quot;key&quot;: &quot;shift+cmd+numpad_subtract&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; foldingEnabled&quot; }, { &quot;command&quot;: &quot;editor.foldAll&quot;, &quot;key&quot;: &quot;shift+cmd+-&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; foldingEnabled&quot; }, { &quot;command&quot;: &quot;editor.fold&quot;, &quot;key&quot;: &quot;cmd+numpad_subtract&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; foldingEnabled&quot; }, { &quot;command&quot;: &quot;editor.fold&quot;, &quot;key&quot;: &quot;cmd+-&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; foldingEnabled&quot; }, { &quot;command&quot;: &quot;editor.foldRecursively&quot;, &quot;key&quot;: &quot;cmd+alt+numpad_subtract&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; foldingEnabled&quot; }, { &quot;command&quot;: &quot;editor.foldRecursively&quot;, &quot;key&quot;: &quot;cmd+alt+-&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; foldingEnabled&quot; }, { &quot;command&quot;: &quot;editor.action.blockComment&quot;, &quot;key&quot;: &quot;cmd+alt+/&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;editor.action.blockComment&quot;, &quot;key&quot;: &quot;cmd+alt+numpad_divide&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;editor.action.blockComment&quot;, &quot;key&quot;: &quot;shift+ctrl+/&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;editor.action.blockComment&quot;, &quot;key&quot;: &quot;shift+ctrl+numpad_divide&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;editor.action.blockComment&quot;, &quot;key&quot;: &quot;shift+cmd+/&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;editor.action.blockComment&quot;, &quot;key&quot;: &quot;shift+cmd+numpad_divide&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;editor.action.commentLine&quot;, &quot;key&quot;: &quot;cmd+/&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;editor.action.commentLine&quot;, &quot;key&quot;: &quot;cmd+numpad_divide&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;workbench.action.tasks.build&quot;, &quot;key&quot;: &quot;cmd+f9&quot; }, { &quot;command&quot;: &quot;copyFilePath&quot;, &quot;key&quot;: &quot;shift+cmd+c&quot;, &quot;when&quot;: &quot;!editorFocus &amp;&amp; !terminalFocus&quot; }, { &quot;command&quot;: &quot;workbench.action.debug.run&quot;, &quot;key&quot;: &quot;ctrl+d&quot;, &quot;when&quot;: &quot;debuggersAvailable &amp;&amp; !inDebugMode &amp;&amp; !terminalFocus&quot; }, { &quot;command&quot;: &quot;merge-conflict.accept.current&quot;, &quot;key&quot;: &quot;shift+ctrl+right&quot;, &quot;when&quot;: &quot;isInDiffEditor&quot; }, { &quot;command&quot;: &quot;merge-conflict.accept.incoming&quot;, &quot;key&quot;: &quot;shift+ctrl+left&quot;, &quot;when&quot;: &quot;isInDiffEditor&quot; }, { &quot;command&quot;: &quot;workbench.action.quickOpenNavigateNext&quot;, &quot;key&quot;: &quot;ctrl+tab&quot;, &quot;when&quot;: &quot;inQuickOpen&quot; }, { &quot;command&quot;: &quot;git.openChange&quot;, &quot;key&quot;: &quot;cmd+d&quot; }, { &quot;command&quot;: &quot;editor.action.goToDeclaration&quot;, &quot;key&quot;: &quot;cmd+down&quot;, &quot;when&quot;: &quot;editorTextFocus&quot; }, { &quot;command&quot;: &quot;editor.action.goToDeclaration&quot;, &quot;key&quot;: &quot;f4&quot;, &quot;when&quot;: &quot;editorTextFocus&quot; }, { &quot;command&quot;: &quot;workbench.action.files.showOpenedFileInNewWindow&quot;, &quot;key&quot;: &quot;shift+f4&quot;, &quot;when&quot;: &quot;emptyWorkspaceSupport&quot; }, { &quot;command&quot;: &quot;acceptSelectedSuggestion&quot;, &quot;key&quot;: &quot;enter&quot;, &quot;when&quot;: &quot;suggestWidgetVisible &amp;&amp; textInputFocus&quot; }, { &quot;command&quot;: &quot;acceptSelectedSuggestion&quot;, &quot;key&quot;: &quot;enter&quot;, &quot;when&quot;: &quot;acceptSuggestionOnEnter &amp;&amp; suggestWidgetVisible &amp;&amp; suggestionMakesTextEdit &amp;&amp; textInputFocus&quot; }, { &quot;command&quot;: &quot;acceptAlternativeSelectedSuggestion&quot;, &quot;key&quot;: &quot;tab&quot;, &quot;when&quot;: &quot;suggestWidgetVisible &amp;&amp; textInputFocus&quot; }, { &quot;command&quot;: &quot;acceptSelectedSuggestion&quot;, &quot;key&quot;: &quot;shift+cmd+enter&quot;, &quot;when&quot;: &quot;suggestWidgetVisible &amp;&amp; textInputFocus&quot; }, { &quot;command&quot;: &quot;acceptSelectedSuggestion&quot;, &quot;key&quot;: &quot;shift+cmd+enter&quot;, &quot;when&quot;: &quot;acceptSuggestionOnEnter &amp;&amp; suggestWidgetVisible &amp;&amp; suggestionMakesTextEdit &amp;&amp; textInputFocus&quot; }, { &quot;command&quot;: &quot;editor.action.deleteLines&quot;, &quot;key&quot;: &quot;cmd+backspace&quot;, &quot;when&quot;: &quot;textInputFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;deleteWordRight&quot;, &quot;key&quot;: &quot;alt+delete&quot;, &quot;when&quot;: &quot;textInputFocus &amp;&amp; !editorReadonly &amp;&amp; !config.intellij-idea-keybindings.useCamelHumpsWords&quot; }, { &quot;command&quot;: &quot;deleteWordLeft&quot;, &quot;key&quot;: &quot;alt+backspace&quot;, &quot;when&quot;: &quot;textInputFocus &amp;&amp; !editorReadonly &amp;&amp; !config.intellij-idea-keybindings.useCamelHumpsWords&quot; }, { &quot;command&quot;: &quot;editor.action.copyLinesDownAction&quot;, &quot;key&quot;: &quot;cmd+d&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly &amp;&amp; !editorHasSelection&quot; }, { &quot;command&quot;: &quot;editor.action.joinLines&quot;, &quot;key&quot;: &quot;shift+ctrl+j&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;cursorLineEnd&quot;, &quot;key&quot;: &quot;end&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;cursorLineEnd&quot;, &quot;key&quot;: &quot;cmd+right&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;cursorLineEnd&quot;, &quot;key&quot;: &quot;ctrl+e&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;cursorLineEndSelect&quot;, &quot;key&quot;: &quot;shift+end&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;cursorLineEndSelect&quot;, &quot;key&quot;: &quot;shift+cmd+right&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;cursorLineStart&quot;, &quot;key&quot;: &quot;home&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;cursorLineStart&quot;, &quot;key&quot;: &quot;cmd+left&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;cursorLineStart&quot;, &quot;key&quot;: &quot;ctrl+a&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;cursorLineStartSelect&quot;, &quot;key&quot;: &quot;shift+home&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;cursorLineStartSelect&quot;, &quot;key&quot;: &quot;shift+cmd+left&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;cursorBottom&quot;, &quot;key&quot;: &quot;cmd+pagedown&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;cursorBottomSelect&quot;, &quot;key&quot;: &quot;shift+cmd+pagedown&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;cursorTop&quot;, &quot;key&quot;: &quot;cmd+pageup&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;cursorTopSelect&quot;, &quot;key&quot;: &quot;shift+cmd+pageup&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;cursorWordRight&quot;, &quot;key&quot;: &quot;alt+right&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !inlineSuggestionVisible &amp;&amp; !config.intellij-idea-keybindings.useCamelHumpsWords&quot; }, { &quot;command&quot;: &quot;cursorWordRight&quot;, &quot;key&quot;: &quot;ctrl+alt+f&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !inlineSuggestionVisible &amp;&amp; !config.intellij-idea-keybindings.useCamelHumpsWords&quot; }, { &quot;command&quot;: &quot;cursorWordRightSelect&quot;, &quot;key&quot;: &quot;shift+alt+right&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !config.intellij-idea-keybindings.useCamelHumpsWords&quot; }, { &quot;command&quot;: &quot;cursorWordRightSelect&quot;, &quot;key&quot;: &quot;shift+ctrl+alt+f&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !config.intellij-idea-keybindings.useCamelHumpsWords&quot; }, { &quot;command&quot;: &quot;cursorPageDown&quot;, &quot;key&quot;: &quot;pagedown&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;cursorPageDownSelect&quot;, &quot;key&quot;: &quot;shift+pagedown&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;cursorPageUp&quot;, &quot;key&quot;: &quot;pageup&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;cursorPageUpSelect&quot;, &quot;key&quot;: &quot;shift+pageup&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;cursorWordLeft&quot;, &quot;key&quot;: &quot;alt+left&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !config.intellij-idea-keybindings.useCamelHumpsWords&quot; }, { &quot;command&quot;: &quot;cursorWordLeft&quot;, &quot;key&quot;: &quot;ctrl+alt+b&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !config.intellij-idea-keybindings.useCamelHumpsWords&quot; }, { &quot;command&quot;: &quot;cursorWordLeftSelect&quot;, &quot;key&quot;: &quot;shift+alt+left&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !config.intellij-idea-keybindings.useCamelHumpsWords&quot; }, { &quot;command&quot;: &quot;cursorWordLeftSelect&quot;, &quot;key&quot;: &quot;shift+ctrl+alt+b&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !config.intellij-idea-keybindings.useCamelHumpsWords&quot; }, { &quot;command&quot;: &quot;editor.action.smartSelect.grow&quot;, &quot;key&quot;: &quot;alt+up&quot;, &quot;when&quot;: &quot;editorTextFocus&quot; }, { &quot;command&quot;: &quot;lineBreakInsert&quot;, &quot;key&quot;: &quot;cmd+enter&quot;, &quot;when&quot;: &quot;textInputFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;editor.action.insertLineAfter&quot;, &quot;key&quot;: &quot;shift+enter&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly &amp;&amp; !notebookEditorFocused&quot; }, { &quot;command&quot;: &quot;editor.action.insertLineAfter&quot;, &quot;key&quot;: &quot;shift+enter&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly &amp;&amp; !suggestWidgetVisible&quot; }, { &quot;command&quot;: &quot;editor.action.insertLineBefore&quot;, &quot;key&quot;: &quot;cmd+alt+enter&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;cursorBottom&quot;, &quot;key&quot;: &quot;cmd+end&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;cursorTop&quot;, &quot;key&quot;: &quot;cmd+home&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;editor.action.toggleColumnSelection&quot;, &quot;key&quot;: &quot;shift+cmd+8&quot; }, { &quot;command&quot;: &quot;editor.action.smartSelect.shrink&quot;, &quot;key&quot;: &quot;alt+down&quot;, &quot;when&quot;: &quot;editorTextFocus&quot; }, { &quot;command&quot;: &quot;editor.debug.action.selectionToRepl&quot;, &quot;key&quot;: &quot;alt+f8&quot;, &quot;when&quot;: &quot;debuggersAvailable &amp;&amp; editorTextFocus &amp;&amp; editorHasSelection&quot; }, { &quot;command&quot;: &quot;editor.unfoldAll&quot;, &quot;key&quot;: &quot;shift+cmd+numpad_add&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; foldingEnabled&quot; }, { &quot;command&quot;: &quot;editor.unfoldAll&quot;, &quot;key&quot;: &quot;shift+cmd+=&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; foldingEnabled&quot; }, { &quot;command&quot;: &quot;editor.unfold&quot;, &quot;key&quot;: &quot;cmd+numpad_add&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; foldingEnabled&quot; }, { &quot;command&quot;: &quot;editor.unfold&quot;, &quot;key&quot;: &quot;cmd+=&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; foldingEnabled&quot; }, { &quot;command&quot;: &quot;editor.unfoldRecursively&quot;, &quot;key&quot;: &quot;cmd+alt+numpad_add&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; foldingEnabled&quot; }, { &quot;command&quot;: &quot;editor.unfoldRecursively&quot;, &quot;key&quot;: &quot;cmd+alt+=&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; foldingEnabled&quot; }, { &quot;command&quot;: &quot;workbench.action.gotoSymbol&quot;, &quot;key&quot;: &quot;cmd+f12&quot;, &quot;when&quot;: &quot;editorTextFocus&quot; }, { &quot;command&quot;: &quot;workbench.action.findInFiles&quot;, &quot;key&quot;: &quot;shift+cmd+f&quot; }, { &quot;command&quot;: &quot;workbench.action.findInFiles&quot;, &quot;key&quot;: &quot;ctrl+shift+f&quot;, &quot;when&quot;: &quot;!explorerResourceIsFolder || !filesExplorerFocus&quot; }, { &quot;command&quot;: &quot;editor.action.nextMatchFindAction&quot;, &quot;key&quot;: &quot;cmd+g&quot;, &quot;when&quot;: &quot;editorFocus&quot; }, { &quot;command&quot;: &quot;editor.action.nextMatchFindAction&quot;, &quot;key&quot;: &quot;cmd+g&quot;, &quot;when&quot;: &quot;editorFocus &amp;&amp; findInputFocussed&quot; }, { &quot;command&quot;: &quot;editor.action.previousMatchFindAction&quot;, &quot;key&quot;: &quot;shift+cmd+g&quot;, &quot;when&quot;: &quot;editorFocus&quot; }, { &quot;command&quot;: &quot;editor.action.previousMatchFindAction&quot;, &quot;key&quot;: &quot;shift+cmd+g&quot;, &quot;when&quot;: &quot;editorFocus &amp;&amp; findInputFocussed&quot; }, { &quot;command&quot;: &quot;references-view.findReferences&quot;, &quot;key&quot;: &quot;alt+f7&quot;, &quot;when&quot;: &quot;editorHasReferenceProvider&quot; }, { &quot;command&quot;: &quot;workbench.action.navigateForward&quot;, &quot;key&quot;: &quot;cmd+]&quot;, &quot;when&quot;: &quot;canNavigateForward&quot; }, { &quot;command&quot;: &quot;workbench.action.navigateForward&quot;, &quot;key&quot;: &quot;cmd+alt+right&quot;, &quot;when&quot;: &quot;canNavigateForward&quot; }, { &quot;command&quot;: &quot;git.pushTo&quot;, &quot;key&quot;: &quot;cmd+alt+k&quot;, &quot;when&quot;: &quot;!inDebugMode &amp;&amp; !terminalFocus&quot; }, { &quot;command&quot;: &quot;workbench.action.showCommands&quot;, &quot;key&quot;: &quot;shift+cmd+a&quot; }, { &quot;command&quot;: &quot;workbench.action.showAllSymbols&quot;, &quot;key&quot;: &quot;cmd+o&quot; }, { &quot;command&quot;: &quot;workbench.action.quickOpen&quot;, &quot;key&quot;: &quot;shift+cmd+n&quot; }, { &quot;command&quot;: &quot;editor.action.goToImplementation&quot;, &quot;key&quot;: &quot;cmd+alt+b&quot;, &quot;when&quot;: &quot;editorHasImplementationProvider &amp;&amp; editorTextFocus &amp;&amp; !isInEmbeddedEditor&quot; }, { &quot;command&quot;: &quot;workbench.action.gotoLine&quot;, &quot;key&quot;: &quot;cmd+l&quot; }, { &quot;command&quot;: &quot;editor.action.marker.next&quot;, &quot;key&quot;: &quot;f2&quot;, &quot;when&quot;: &quot;editorFocus&quot; }, { &quot;command&quot;: &quot;editor.action.marker.prev&quot;, &quot;key&quot;: &quot;shift+f2&quot;, &quot;when&quot;: &quot;editorFocus&quot; }, { &quot;command&quot;: &quot;workbench.action.gotoSymbol&quot;, &quot;key&quot;: &quot;cmd+alt+o&quot;, &quot;when&quot;: &quot;editorTextFocus&quot; }, { &quot;command&quot;: &quot;editor.action.goToTypeDefinition&quot;, &quot;key&quot;: &quot;shift+cmd+b&quot;, &quot;when&quot;: &quot;editorTextFocus&quot; }, { &quot;command&quot;: &quot;editor.action.goToTypeDefinition&quot;, &quot;key&quot;: &quot;shift+ctrl+b&quot;, &quot;when&quot;: &quot;editorTextFocus&quot; }, { &quot;command&quot;: &quot;workbench.action.toggleSidebarVisibility&quot;, &quot;key&quot;: &quot;shift+escape&quot;, &quot;when&quot;: &quot;!editorFocus &amp;&amp; !terminalFocus &amp;&amp; !problemFocus &amp;&amp; !inDebugRepl&quot; }, { &quot;command&quot;: &quot;workbench.action.toggleSidebarVisibility&quot;, &quot;key&quot;: &quot;shift+escape&quot;, &quot;when&quot;: &quot;explorerViewletFocus&quot; }, { &quot;command&quot;: &quot;workbench.action.toggleSidebarVisibility&quot;, &quot;key&quot;: &quot;shift+escape&quot; }, { &quot;command&quot;: &quot;workbench.action.maximizeEditor&quot;, &quot;key&quot;: &quot;shift+cmd+f12&quot; }, { &quot;command&quot;: &quot;workbench.action.navigateToLastEditLocation&quot;, &quot;key&quot;: &quot;shift+cmd+backspace&quot; }, { &quot;command&quot;: &quot;editor.action.moveLinesDownAction&quot;, &quot;key&quot;: &quot;shift+alt+down&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;editor.action.moveLinesUpAction&quot;, &quot;key&quot;: &quot;shift+alt+up&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;workbench.action.compareEditor.nextChange&quot;, &quot;key&quot;: &quot;f7&quot;, &quot;when&quot;: &quot;textCompareEditorVisible&quot; }, { &quot;command&quot;: &quot;workbench.action.focusNextGroup&quot;, &quot;key&quot;: &quot;alt+tab&quot;, &quot;when&quot;: &quot;editorFocus&quot; }, { &quot;command&quot;: &quot;workbench.action.nextEditor&quot;, &quot;key&quot;: &quot;shift+cmd+]&quot; }, { &quot;command&quot;: &quot;workbench.action.nextEditor&quot;, &quot;key&quot;: &quot;ctrl+right&quot; }, { &quot;command&quot;: &quot;editor.action.organizeImports&quot;, &quot;key&quot;: &quot;ctrl+alt+o&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly &amp;&amp; supportedCodeAction =~ /(\\\\s|^)source\\\\.organizeImports\\\\b/&quot; }, { &quot;command&quot;: &quot;editor.action.triggerParameterHints&quot;, &quot;key&quot;: &quot;cmd+p&quot;, &quot;when&quot;: &quot;editorHasSignatureHelpProvider &amp;&amp; editorTextFocus&quot; }, { &quot;command&quot;: &quot;workbench.action.focusPreviousGroup&quot;, &quot;key&quot;: &quot;shift+alt+tab&quot;, &quot;when&quot;: &quot;editorFocus&quot; }, { &quot;command&quot;: &quot;workbench.action.compareEditor.previousChange&quot;, &quot;key&quot;: &quot;shift+f7&quot;, &quot;when&quot;: &quot;textCompareEditorVisible&quot; }, { &quot;command&quot;: &quot;workbench.action.previousEditor&quot;, &quot;key&quot;: &quot;shift+cmd+[&quot; }, { &quot;command&quot;: &quot;workbench.action.previousEditor&quot;, &quot;key&quot;: &quot;ctrl+left&quot; }, { &quot;command&quot;: &quot;workbench.action.selectTheme&quot;, &quot;key&quot;: &quot;ctrl+`&quot; }, { &quot;command&quot;: &quot;editor.action.previewDeclaration&quot;, &quot;key&quot;: &quot;alt+space&quot; }, { &quot;command&quot;: &quot;editor.action.previewDeclaration&quot;, &quot;key&quot;: &quot;cmd+y&quot; }, { &quot;command&quot;: &quot;editor.action.showHover&quot;, &quot;key&quot;: &quot;f1&quot;, &quot;when&quot;: &quot;editorTextFocus&quot; }, { &quot;command&quot;: &quot;editor.action.showHover&quot;, &quot;key&quot;: &quot;ctrl+j&quot;, &quot;when&quot;: &quot;editorTextFocus&quot; }, { &quot;command&quot;: &quot;workbench.action.openRecent&quot;, &quot;key&quot;: &quot;cmd+e&quot;, &quot;when&quot;: &quot;!inQuickOpen&quot; }, { &quot;command&quot;: &quot;workbench.action.openPreviousEditorFromHistory&quot;, &quot;key&quot;: &quot;cmd+e&quot;, &quot;when&quot;: &quot;inQuickOpen&quot; }, { &quot;command&quot;: &quot;editor.action.formatDocument&quot;, &quot;key&quot;: &quot;cmd+alt+l&quot;, &quot;when&quot;: &quot;editorHasDocumentFormattingProvider &amp;&amp; editorTextFocus &amp;&amp; !editorReadonly &amp;&amp; !inCompositeEditor&quot; }, { &quot;command&quot;: &quot;editor.action.rename&quot;, &quot;key&quot;: &quot;shift+f6&quot;, &quot;when&quot;: &quot;editorHasRenameProvider &amp;&amp; editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;editor.action.startFindReplaceAction&quot;, &quot;key&quot;: &quot;cmd+r&quot;, &quot;when&quot;: &quot;editorFocus || editorIsOpen&quot; }, { &quot;command&quot;: &quot;workbench.action.replaceInFiles&quot;, &quot;key&quot;: &quot;shift+cmd+r&quot; }, { &quot;command&quot;: &quot;workbench.action.debug.continue&quot;, &quot;key&quot;: &quot;cmd+alt+r&quot;, &quot;when&quot;: &quot;inDebugMode&quot; }, { &quot;command&quot;: &quot;workbench.action.debug.continue&quot;, &quot;key&quot;: &quot;f9&quot;, &quot;when&quot;: &quot;inDebugMode&quot; }, { &quot;command&quot;: &quot;workbench.action.tasks.reRunTask&quot;, &quot;key&quot;: &quot;ctrl+r&quot;, &quot;when&quot;: &quot;taskCommandsRegistered &amp;&amp; !terminalFocus&quot; }, { &quot;command&quot;: &quot;editor.debug.action.runToCursor&quot;, &quot;key&quot;: &quot;alt+f9&quot;, &quot;when&quot;: &quot;debugState == 'stopped'&quot; }, { &quot;command&quot;: &quot;workbench.action.files.saveAll&quot;, &quot;key&quot;: &quot;cmd+s&quot; }, { &quot;command&quot;: &quot;workbench.action.showCommands&quot;, &quot;key&quot;: &quot;shift shift&quot; }, { &quot;command&quot;: &quot;editor.action.selectHighlights&quot;, &quot;key&quot;: &quot;ctrl+cmd+g&quot;, &quot;when&quot;: &quot;editorFocus&quot; }, { &quot;command&quot;: &quot;editor.action.addSelectionToNextFindMatch&quot;, &quot;key&quot;: &quot;ctrl+g&quot;, &quot;when&quot;: &quot;editorFocus&quot; }, { &quot;command&quot;: &quot;workbench.action.showErrorsWarnings&quot;, &quot;key&quot;: &quot;cmd+f1&quot;, &quot;when&quot;: &quot;editorTextFocus&quot; }, { &quot;command&quot;: &quot;editor.action.quickFix&quot;, &quot;key&quot;: &quot;alt+enter&quot;, &quot;when&quot;: &quot;editorHasCodeActionsProvider &amp;&amp; editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;workbench.action.tasks.configureTaskRunner&quot;, &quot;key&quot;: &quot;cmd+;&quot; }, { &quot;command&quot;: &quot;workbench.action.openGlobalSettings&quot;, &quot;key&quot;: &quot;cmd+,&quot; }, { &quot;command&quot;: &quot;editor.action.referenceSearch.trigger&quot;, &quot;key&quot;: &quot;cmd+alt+f7&quot;, &quot;when&quot;: &quot;editorHasReferenceProvider &amp;&amp; editorTextFocus &amp;&amp; !inReferenceSearchEditor&quot; }, { &quot;command&quot;: &quot;workbench.action.debug.stepInto&quot;, &quot;key&quot;: &quot;f7&quot;, &quot;when&quot;: &quot;debugState != 'inactive'&quot; }, { &quot;command&quot;: &quot;workbench.action.debug.stepOut&quot;, &quot;key&quot;: &quot;shift+f8&quot;, &quot;when&quot;: &quot;debugState == 'stopped'&quot; }, { &quot;command&quot;: &quot;workbench.action.debug.stepOver&quot;, &quot;key&quot;: &quot;f8&quot;, &quot;when&quot;: &quot;debugState == 'stopped'&quot; }, { &quot;command&quot;: &quot;workbench.action.toggleFullScreen&quot;, &quot;key&quot;: &quot;ctrl+cmd+f&quot; }, { &quot;command&quot;: &quot;editor.debug.action.toggleBreakpoint&quot;, &quot;key&quot;: &quot;cmd+f8&quot;, &quot;when&quot;: &quot;debuggersAvailable &amp;&amp; editorTextFocus&quot; }, { &quot;command&quot;: &quot;java.action.showTypeHierarchy&quot;, &quot;key&quot;: &quot;ctrl+h&quot;, &quot;when&quot;: &quot;editorLangId == java &amp;&amp; javaLSReady &amp;&amp; editorTextFocus&quot; }, { &quot;command&quot;: &quot;cursorUndo&quot;, &quot;key&quot;: &quot;shift+ctrl+g&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;command&quot;: &quot;git.revertSelectedRanges&quot;, &quot;key&quot;: &quot;cmd+alt+z&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;command&quot;: &quot;git.sync&quot;, &quot;key&quot;: &quot;cmd+t&quot; }, { &quot;command&quot;: &quot;editor.action.dirtydiff.next&quot;, &quot;key&quot;: &quot;shift+ctrl+alt+down&quot;, &quot;when&quot;: &quot;editorTextFocus&quot; }, { &quot;command&quot;: &quot;editor.action.dirtydiff.previous&quot;, &quot;key&quot;: &quot;shift+ctrl+alt+up&quot;, &quot;when&quot;: &quot;editorTextFocus&quot; }, { &quot;command&quot;: &quot;workbench.view.debug&quot;, &quot;key&quot;: &quot;shift+cmd+f8&quot; }, { &quot;command&quot;: &quot;-workbench.view.debug&quot;, &quot;key&quot;: &quot;shift+cmd+d&quot; }, { &quot;command&quot;: &quot;-workbench.action.navigateBack&quot;, &quot;key&quot;: &quot;ctrl+-&quot; }, { &quot;command&quot;: &quot;-references-view.showCallHierarchy&quot;, &quot;key&quot;: &quot;shift+alt+h&quot; }, { &quot;command&quot;: &quot;-git.commitAll&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-editor.action.triggerSuggest&quot;, &quot;key&quot;: &quot;cmd+i&quot; }, { &quot;command&quot;: &quot;-editor.action.triggerSuggest&quot;, &quot;key&quot;: &quot;alt+escape&quot; }, { &quot;command&quot;: &quot;-editor.foldAll&quot;, &quot;key&quot;: &quot;cmd+k cmd+0&quot; }, { &quot;command&quot;: &quot;-editor.fold&quot;, &quot;key&quot;: &quot;alt+cmd+[&quot; }, { &quot;command&quot;: &quot;-editor.foldRecursively&quot;, &quot;key&quot;: &quot;cmd+k cmd+[&quot; }, { &quot;command&quot;: &quot;-editor.action.blockComment&quot;, &quot;key&quot;: &quot;shift+alt+a&quot; }, { &quot;command&quot;: &quot;-workbench.action.tasks.build&quot;, &quot;key&quot;: &quot;shift+cmd+b&quot; }, { &quot;command&quot;: &quot;-copyFilePath&quot;, &quot;key&quot;: &quot;alt+cmd+c&quot; }, { &quot;command&quot;: &quot;-workbench.action.debug.run&quot;, &quot;key&quot;: &quot;ctrl+f5&quot; }, { &quot;command&quot;: &quot;-merge-conflict.accept.current&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-merge-conflict.accept.incoming&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-workbench.action.quickOpenNavigateNext&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-git.openChange&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-editor.action.goToDeclaration&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-workbench.action.files.showOpenedFileInNewWindow&quot;, &quot;key&quot;: &quot;cmd+k o&quot; }, { &quot;command&quot;: &quot;-acceptSelectedSuggestion&quot;, &quot;key&quot;: &quot;tab&quot; }, { &quot;command&quot;: &quot;-acceptAlternativeSelectedSuggestion&quot;, &quot;key&quot;: &quot;shift+tab&quot; }, { &quot;command&quot;: &quot;-acceptAlternativeSelectedSuggestion&quot;, &quot;key&quot;: &quot;shift+enter&quot; }, { &quot;command&quot;: &quot;-editor.action.deleteLines&quot;, &quot;key&quot;: &quot;shift+cmd+k&quot; }, { &quot;command&quot;: &quot;-editor.action.copyLinesDownAction&quot;, &quot;key&quot;: &quot;shift+alt+down&quot; }, { &quot;command&quot;: &quot;-editor.action.joinLines&quot;, &quot;key&quot;: &quot;ctrl+j&quot; }, { &quot;command&quot;: &quot;-cursorLineEndSelect&quot;, &quot;key&quot;: &quot;ctrl+shift+e&quot; }, { &quot;command&quot;: &quot;-cursorLineStartSelect&quot;, &quot;key&quot;: &quot;ctrl+shift+a&quot; }, { &quot;command&quot;: &quot;-cursorBottom&quot;, &quot;key&quot;: &quot;cmd+down&quot; }, { &quot;command&quot;: &quot;-cursorBottomSelect&quot;, &quot;key&quot;: &quot;shift+cmd+down&quot; }, { &quot;command&quot;: &quot;-cursorTop&quot;, &quot;key&quot;: &quot;cmd+up&quot; }, { &quot;command&quot;: &quot;-cursorTopSelect&quot;, &quot;key&quot;: &quot;shift+cmd+up&quot; }, { &quot;command&quot;: &quot;-cursorWordRightSelect&quot;, &quot;key&quot;: &quot;alt+shift+right&quot; }, { &quot;command&quot;: &quot;-cursorWordLeftSelect&quot;, &quot;key&quot;: &quot;alt+shift+left&quot; }, { &quot;command&quot;: &quot;-editor.action.smartSelect.grow&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-lineBreakInsert&quot;, &quot;key&quot;: &quot;ctrl+o&quot; }, { &quot;command&quot;: &quot;-editor.action.insertLineAfter&quot;, &quot;key&quot;: &quot;cmd+enter&quot; }, { &quot;command&quot;: &quot;-editor.action.insertLineBefore&quot;, &quot;key&quot;: &quot;shift+cmd+enter&quot; }, { &quot;command&quot;: &quot;-editor.action.toggleColumnSelection&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-editor.action.smartSelect.shrink&quot;, &quot;key&quot;: &quot;ctrl+shift+left&quot; }, { &quot;command&quot;: &quot;-editor.action.smartSelect.shrink&quot;, &quot;key&quot;: &quot;ctrl+shift+cmd+left&quot; }, { &quot;command&quot;: &quot;-editor.debug.action.selectionToRepl&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-editor.unfoldAll&quot;, &quot;key&quot;: &quot;cmd+k cmd+j&quot; }, { &quot;command&quot;: &quot;-editor.unfold&quot;, &quot;key&quot;: &quot;alt+cmd+]&quot; }, { &quot;command&quot;: &quot;-editor.unfoldRecursively&quot;, &quot;key&quot;: &quot;cmd+k cmd+]&quot; }, { &quot;command&quot;: &quot;-workbench.action.gotoSymbol&quot;, &quot;key&quot;: &quot;shift+cmd+o&quot; }, { &quot;command&quot;: &quot;-editor.action.nextMatchFindAction&quot;, &quot;key&quot;: &quot;f3&quot; }, { &quot;command&quot;: &quot;-editor.action.nextMatchFindAction&quot;, &quot;key&quot;: &quot;enter&quot; }, { &quot;command&quot;: &quot;-editor.action.previousMatchFindAction&quot;, &quot;key&quot;: &quot;shift+f3&quot; }, { &quot;command&quot;: &quot;-editor.action.previousMatchFindAction&quot;, &quot;key&quot;: &quot;shift+enter&quot; }, { &quot;command&quot;: &quot;-references-view.findReferences&quot;, &quot;key&quot;: &quot;shift+alt+f12&quot; }, { &quot;command&quot;: &quot;-workbench.action.navigateForward&quot;, &quot;key&quot;: &quot;ctrl+shift+-&quot; }, { &quot;command&quot;: &quot;-git.pushTo&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-workbench.action.showCommands&quot;, &quot;key&quot;: &quot;f1&quot; }, { &quot;command&quot;: &quot;-workbench.action.showCommands&quot;, &quot;key&quot;: &quot;shift+cmd+p&quot; }, { &quot;command&quot;: &quot;-workbench.action.showAllSymbols&quot;, &quot;key&quot;: &quot;cmd+t&quot; }, { &quot;command&quot;: &quot;-workbench.action.quickOpen&quot;, &quot;key&quot;: &quot;cmd+p&quot; }, { &quot;command&quot;: &quot;-editor.action.goToImplementation&quot;, &quot;key&quot;: &quot;cmd+f12&quot; }, { &quot;command&quot;: &quot;-workbench.action.gotoLine&quot;, &quot;key&quot;: &quot;ctrl+g&quot; }, { &quot;command&quot;: &quot;-editor.action.marker.next&quot;, &quot;key&quot;: &quot;alt+f8&quot; }, { &quot;command&quot;: &quot;-editor.action.marker.prev&quot;, &quot;key&quot;: &quot;shift+alt+f8&quot; }, { &quot;command&quot;: &quot;-editor.action.goToTypeDefinition&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-workbench.action.toggleSidebarVisibility&quot;, &quot;key&quot;: &quot;cmd+b&quot; }, { &quot;command&quot;: &quot;-workbench.action.maximizeEditor&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-workbench.action.navigateToLastEditLocation&quot;, &quot;key&quot;: &quot;cmd+k cmd+q&quot; }, { &quot;command&quot;: &quot;-editor.action.moveLinesDownAction&quot;, &quot;key&quot;: &quot;alt+down&quot; }, { &quot;command&quot;: &quot;-editor.action.moveLinesUpAction&quot;, &quot;key&quot;: &quot;alt+up&quot; }, { &quot;command&quot;: &quot;-workbench.action.compareEditor.nextChange&quot;, &quot;key&quot;: &quot;alt+f5&quot; }, { &quot;command&quot;: &quot;-workbench.action.focusNextGroup&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-workbench.action.nextEditor&quot;, &quot;key&quot;: &quot;alt+cmd+right&quot; }, { &quot;command&quot;: &quot;-editor.action.organizeImports&quot;, &quot;key&quot;: &quot;shift+alt+o&quot; }, { &quot;command&quot;: &quot;-editor.action.triggerParameterHints&quot;, &quot;key&quot;: &quot;shift+cmd+space&quot; }, { &quot;command&quot;: &quot;-workbench.action.focusPreviousGroup&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-workbench.action.compareEditor.previousChange&quot;, &quot;key&quot;: &quot;shift+alt+f5&quot; }, { &quot;command&quot;: &quot;-workbench.action.previousEditor&quot;, &quot;key&quot;: &quot;alt+cmd+left&quot; }, { &quot;command&quot;: &quot;-workbench.action.selectTheme&quot;, &quot;key&quot;: &quot;cmd+k cmd+t&quot; }, { &quot;command&quot;: &quot;-editor.action.previewDeclaration&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-editor.action.showHover&quot;, &quot;key&quot;: &quot;cmd+k cmd+i&quot; }, { &quot;command&quot;: &quot;-workbench.action.openPreviousEditorFromHistory&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-editor.action.formatDocument&quot;, &quot;key&quot;: &quot;shift+alt+f&quot; }, { &quot;command&quot;: &quot;-editor.action.rename&quot;, &quot;key&quot;: &quot;f2&quot; }, { &quot;command&quot;: &quot;-editor.action.startFindReplaceAction&quot;, &quot;key&quot;: &quot;alt+cmd+f&quot; }, { &quot;command&quot;: &quot;-workbench.action.replaceInFiles&quot;, &quot;key&quot;: &quot;shift+cmd+h&quot; }, { &quot;command&quot;: &quot;-workbench.action.debug.continue&quot;, &quot;key&quot;: &quot;f5&quot; }, { &quot;command&quot;: &quot;-workbench.action.tasks.reRunTask&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-editor.debug.action.runToCursor&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-workbench.action.files.saveAll&quot;, &quot;key&quot;: &quot;alt+cmd+s&quot; }, { &quot;command&quot;: &quot;-editor.action.selectHighlights&quot;, &quot;key&quot;: &quot;shift+cmd+l&quot; }, { &quot;command&quot;: &quot;-editor.action.addSelectionToNextFindMatch&quot;, &quot;key&quot;: &quot;cmd+d&quot; }, { &quot;command&quot;: &quot;-workbench.action.showErrorsWarnings&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-editor.action.quickFix&quot;, &quot;key&quot;: &quot;cmd+.&quot; }, { &quot;command&quot;: &quot;-workbench.action.tasks.configureTaskRunner&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-workbench.action.openGlobalSettings&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-editor.action.referenceSearch.trigger&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-workbench.action.debug.stepInto&quot;, &quot;key&quot;: &quot;f11&quot; }, { &quot;command&quot;: &quot;-workbench.action.debug.stepOut&quot;, &quot;key&quot;: &quot;shift+f11&quot; }, { &quot;command&quot;: &quot;-workbench.action.debug.stepOver&quot;, &quot;key&quot;: &quot;f10&quot; }, { &quot;command&quot;: &quot;-editor.debug.action.toggleBreakpoint&quot;, &quot;key&quot;: &quot;f9&quot; }, { &quot;command&quot;: &quot;-java.action.showTypeHierarchy&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-cursorUndo&quot;, &quot;key&quot;: &quot;cmd+u&quot; }, { &quot;command&quot;: &quot;-git.revertSelectedRanges&quot;, &quot;key&quot;: &quot;cmd+k cmd+r&quot; }, { &quot;command&quot;: &quot;-git.sync&quot;, &quot;key&quot;: &quot;&quot; }, { &quot;command&quot;: &quot;-editor.action.dirtydiff.next&quot;, &quot;key&quot;: &quot;alt+f3&quot; }, { &quot;command&quot;: &quot;-editor.action.dirtydiff.previous&quot;, &quot;key&quot;: &quot;shift+alt+f3&quot; }, { &quot;key&quot;: &quot;cmd+w&quot;, &quot;command&quot;: &quot;-workbench.action.closeWindow&quot;, &quot;when&quot;: &quot;!editorIsOpen &amp;&amp; !multipleEditorGroups&quot; }, { &quot;key&quot;: &quot;cmd+w&quot;, &quot;command&quot;: &quot;-workbench.action.terminal.killEditor&quot;, &quot;when&quot;: &quot;terminalEditorFocus &amp;&amp; terminalFocus &amp;&amp; terminalHasBeenCreated || terminalEditorFocus &amp;&amp; terminalFocus &amp;&amp; terminalProcessSupported&quot; }, { &quot;key&quot;: &quot;cmd+w&quot;, &quot;command&quot;: &quot;-workbench.action.closeActiveEditor&quot; }, { &quot;key&quot;: &quot;cmd+w&quot;, &quot;command&quot;: &quot;-workbench.action.closeGroup&quot;, &quot;when&quot;: &quot;activeEditorGroupEmpty &amp;&amp; multipleEditorGroups&quot; }, { &quot;key&quot;: &quot;cmd+w&quot;, &quot;command&quot;: &quot;editor.action.smartSelect.expand&quot;, &quot;when&quot;: &quot;editorTextFocus&quot; }, { &quot;key&quot;: &quot;ctrl+shift+right&quot;, &quot;command&quot;: &quot;-editor.action.smartSelect.expand&quot;, &quot;when&quot;: &quot;editorTextFocus&quot; }, { &quot;key&quot;: &quot;ctrl+shift+cmd+right&quot;, &quot;command&quot;: &quot;-editor.action.smartSelect.expand&quot;, &quot;when&quot;: &quot;editorTextFocus&quot; }, { &quot;key&quot;: &quot;cmd+n&quot;, &quot;command&quot;: &quot;-workbench.action.files.newUntitledFile&quot; }, { &quot;key&quot;: &quot;cmd+n&quot;, &quot;command&quot;: &quot;-editor.action.sourceAction&quot;, &quot;when&quot;: &quot;editorHasCodeActionsProvider &amp;&amp; editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;key&quot;: &quot;shift+cmd+o&quot;, &quot;command&quot;: &quot;-workbench.action.quickOpen&quot; }, { &quot;key&quot;: &quot;cmd+y&quot;, &quot;command&quot;: &quot;editor.action.deleteLines&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;key&quot;: &quot;cmd+backspace&quot;, &quot;command&quot;: &quot;-editor.action.deleteLines&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot; }, { &quot;key&quot;: &quot;shift+cmd+n&quot;, &quot;command&quot;: &quot;-workbench.action.newWindow&quot; }]","link":"/2025/01/05/VSCode%E9%85%8D%E7%BD%AE%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%BAJetBransIDEA%E7%9A%84/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2024/01/21/hello-world/"},{"title":"滴答清单使用清单","text":"昨天给滴答清单的任务的任务做了清单分组，又做了标签细分，想着通过清单+标签+优先级来控制任务，结果，今天我却不会使用滴答清单了。 原因就是，这样使任务创建变得非常麻烦。 最后的解决办法就是，创建任务时，仅仅给任务做一个标签分类，别的功能都不用。 先说结论，最后是怎样使用滴答清单的，如下图： 创建了P0~P4等5个标签； inbox中的任务，仅仅给它打个标签； 有了标签的任务，任务会按照标签进行分组展示； 执行的时候，按照标签的排序进行； 再来说说，我什么会突发奇想，重新整理清单分组？ 我可能是想把滴答清单有的功能，都用上 重新把滴答清单的清单分组，更清晰 重新制定每个任务的执行时间标签，10min,30min,1H等 按照程序提供的优先级来排序 这样做错的缺点是，创建一个任务到inbox中后，需要进行3步才完成，但是3步后的任务的分组，并非是我期望的排序，我期望按照是整体的优先级排序。 反思一下，按照P0~P4的标签进行分组，并按照优先级排序以方便执行的做法，也是我使用好几年滴答清单迭代出来的。这样使用了近半年，一直都挺好。 现在，又将它改回去了。当之后发呆的时候，可以再给任务做个“清单”纬度的分组，来整理大脑。","link":"/2025/01/05/%E6%BB%B4%E7%AD%94%E6%B8%85%E5%8D%95%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"},{"title":"Artificial Intelligence学习","text":"面向初学者的生成式人工智能课程课程简介：微软云技术布道师团队提供的十二章系列课程，了解构建生成式 AI 应用程序的基础知识。 课程介绍和学习环境设置代码资料：https://github.com/microsoft/generative-ai-for-beginners 第一章 : 生成式人工智能和 LLMs 介绍学习目标，学习完本课程后，您将会了解到： 什么是生成式人工智能以及 LLMs 如何工作。 如何针对不同的使用 LLMs 的例子(这里我们重点关注教育场景)。 第二章 : 探索和比较不同的 LLMs学习目标，完成本章学习后，您将会学习到： 为您的应用场景选择合适的模型。 了解如何测试、迭代和提高模型的性能。 了解企业如何部署模型。 第三章 ： 负责任地使用生成式人工智能学习目标，学完本章内容后您将了解到： 构建生成式人工智能应用程序时负责任的人工智能的重要性。 在构建生成式 AI 应用程序时何时思考和应用 Responsible AI 的核心原则。 您可以使用哪些工具和策略来将 Responsible AI 的概念付诸实践。 第四章：提示工程基础学习目标，在本章中，我们将了解什么是提示工程、为什么它很重要，以及如何针对给定的模型和应用程序目标制定更有效的提示。 我们将了解提示工程的核心概念和最佳实践，并了解交互式 Jupyter Notebooks“沙箱”环境，在 Notebooks 中我们可以看到这些概念应用于实际示例。 在本课结束时，我们将能够： 解释什么是提示工程及其重要性。 描述提示的组成部分及其使用方法。 学习提示工程的最佳实践和技术。 结合 OpenAI 将学到的技术应用于实际示例。 本章值得反复看，尤其是提示词使用那块 第五章：创建高级的提示工程技巧学习目标，完成本课程后，您将能够掌握： 应用提示工程技术来改善提示结果。 执行多样化或确定性的提示。","link":"/2024/01/24/AI/Artificial%20Intelligence%E5%AD%A6%E4%B9%A0/"},{"title":"","text":"看来不止我一个人这么做。 我的做法是，给cursor安装了chrome-mcp，因此它可以访问需要授权的在线文档的web_content，我只需要完善在线文档的技术方案的细节，然后cursor便可以读取网页来完成代码了。","link":"/2025/09/15/weibo/2025-09-15_110958/"},{"title":"","text":"用cursor写了一个将flomo笔记同步到GitHub Page的油猴脚本。","link":"/2025/09/21/weibo/2025-09-21_122327/"},{"title":"","text":"作为软件开发，深有同感啊。虽然cursor提高了开发效率，但是工作量却大了很多。 想起来第一次工业革命，纺织工人虽然可以操作机器更轻松了，但是却需要黑白两班倒工作，因为机器不需要休息。","link":"/2025/09/29/weibo/2025-09-29_111212/"},{"title":"Java开发面试准备","text":"软件开发工程师的技术面试，一般分为三个部分：编程语言基础知识（俗称八股）、编程题、项目经验。 这篇记录下如何准备面试。 一、八股不错的资料1： https://www.pdai.tech/ Java 全栈知识点问题汇总（上） Java 全栈知识点问题汇总（下） 不错的资料2： Java Guide：https://javaguide.cn/home.html小林图解：https://xiaolincoding.com/On Java 8：https://github.com/rocLv/OnJava8cs-note：https://cyc2018.xyz/ 其实上面这些资料都挺全的，从入门到架构，都很详细，选一个自己喜欢的风格，认真复习即可。 二、算法题刷题有两个方向： 按照知识点汇总 https://labuladong.online/algo/essential-technique/abstraction-of-algorithm/ （站在刷题者的角度写的教程，有付费内容，可以仅看免费部分） https://www.programmercarl.com/ （默认语音是Python） https://github.com/SharingSource/LogicStack-LeetCode/wiki 按照高频考题刷 https://codetop.cc/home 建议先按照知识点刷，先过一遍考点，整体复习一下，之后可以看看高频题。 三、项目经验看看别人的面试经验，根据他的项目问题，思考自己的项目中遇到过什么问题，如何解决的。 （面经建议现搜索） 这里提供一些问题作参考： 讲项目 再讲个项目 平时读什么源码 对XX领域架构了解吗？（XX=电商、支付、物流） 常见的限流算法有哪些，你们系统中是如何应用的？ 你的系统如何保障稳定性？","link":"/2024/02/23/%E6%8A%80%E6%9C%AF/Java%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"},{"title":"Python&#x2F;Go开发常用命令","text":"最近在做Python和Go语言开发，这里列出一些常用的命令，记熟能提高开发效率。 每次都要用的命令Python1234567891011121314151617181920212223pyenv local 3.11.10 # 设置当前目录的 Python 版本python -m venv .venv # 创建新的虚拟环境.venvsource .venv/bin/activate # 激活新的虚拟环境deactivate # 先退出虚拟环境rm -rf .venv # 删除旧的虚拟环境# 用uv来安装依赖uv venv --python 3.11.10 .venvsource .venv/bin/activateuv sync # 安装依赖# 查看已安装的版本pyenv versions# 使用 pyenv 安装所需的 Python 版本pyenv install --listpyenv install 3.9.7pyenv install 3.10.0# 设置全局版本pyenv global 3.9.7# 设置当前目录的本地版本pyenv local 3.10.0 1234567891011121314151617# 输入以下命令来禁用自动激活 环境conda config --set auto_activate_base false# 激活base虚拟环境，激活其他：conda activate your_environment_nameconda activate base# 关闭虚拟环境conda deactivate# Anaconda 创建虚拟环境 myenvconda create -n myenv python=3.9# 激活 myenv 环境conda activate myenv# 关闭虚拟环境conda deactivate Go1234# 清空模块缓存，相当于Java的mvn cleango clean -modcache# 重新加载，相当于 mvn compilego mod tidy Node.js启动一个node服务，读取本地文件 1234567891011121314mkdir my-http-servercd my-http-server# 初始化，将创建一个 package.json 文件npm init -ynpm install http-server --save-devnpx http-server# 下面是可选操作# 将 ./your-directory 替换为你存放 HTML 文件的目录，3000 替换为你想要的端口号。npx http-server ./your-directory -p 3000 一次性配置的命令/脚本Python配置pyenv管理多个Python版本 12345678910111213141516# 安装管理工具 pyenvbrew install pyenv# 配置 shell 配置文件，我的是 .zprofileexport PATH=&quot;$HOME/.pyenv/bin:$PATH&quot;eval &quot;$(pyenv init --path)&quot;eval &quot;$(pyenv init -)&quot;eval &quot;$(pyenv virtualenv-init -)&quot;# 配置好后，sourcesource ~/.zprofile# 执行which，判断上述配置是否生效which python# 若生效，会显示 HOME/.pyenv/shims/python ，否则显示其他目录下的 python(如brew安装的) 其他配置代理新建proxy.sh，copy下面的代码： 1234567891011121314151617181920212223#!/bin/bashecho $1echo $0# 检查参数if [ &quot;$1&quot; == &quot;set&quot; ]; then export https_proxy=http://127.0.0.1:7890 export http_proxy=http://127.0.0.1:7890 export all_proxy=socks5://127.0.0.1:7890 echo &quot;代理已设置&quot;elif [ &quot;$1&quot; == &quot;unset&quot; ]; then unset https_proxy unset http_proxy unset all_proxy echo &quot;代理已取消&quot;else echo &quot;用法: $0 {set|unset}&quot;fiecho &quot;http_proxy: $http_proxy&quot;echo &quot;https_proxy: $https_proxy&quot;echo &quot;all_proxy: $all_proxy&quot; 执行：chmod +x proxy.sh 使用：./proxy.sh set 或 ./proxy.sh unset Mac 无法验证开发者打开来自未知开发者的App 执行命令： xattr -cr xxx_app_name","link":"/2024/11/18/%E6%8A%80%E6%9C%AF/Python&Go%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"title":"Rime词典多设备同步用户自定义配置","text":"最近尝试了Rime词典，挺好用的。但Rime词典应用本身不具备云同步能力（不需要登录，这也是一个亮点），因此，自己若有多台设备，需要软件配置、自定义词库等数据的做到多设备同步才能使用的更加得心应手。 步骤一：打开用户设定 步骤二：修改 installation.yaml 主要修改这两个地方： installation_id 需要唯一，是一个设备标识，默认值是一个UUID，可以改为自己的设备名称，能够区分且保持唯一即可。sync_dir 标识用户数据同步到哪个目录 步骤三：生成同步数据![Pasted image 20250526224241](/Users/wayss/code/own-obsidian-knowledge/笔记Blog/attachments/Pasted image 20250526224241.png) 会生成这样的配置文件。 步骤四：多设备同步配置数据可以采用的同步工具： Github 目前我采用Github同步Rime配置数据 各类网盘 步骤五：用同步的设备覆盖本地词典的数据这里注意，需要手动覆盖，因为可能会发生文件冲突，需要手动解决。 步骤六：编写shell脚步完成定时自动同步参考文章：https://chenhe.me/post/oh-my-rime#%E9%85%8D%E7%BD%AE%E5%90%8C%E6%AD%A5","link":"/2025/05/26/%E6%8A%80%E6%9C%AF/Rime%E8%AF%8D%E5%85%B8%E5%A4%9A%E8%AE%BE%E5%A4%87%E5%90%8C%E6%AD%A5%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE/"},{"title":"T+1 与 T-1 区别","text":"T+1与T-1的区别主要是看数据的角色视角不同 T+1：站在数据生产的视角观察，数据是生产后，T+1天后才被看到（即生产出数据第二天才能看到，所以是 +1）； T-1：站在数据分析人员等看数据的视角是，看到的数据是T-1的数据（即昨天的数据，所以是-1）。","link":"/2024/01/22/%E6%8A%80%E6%9C%AF/T+1%20%E4%B8%8E%20T-1%20%E5%8C%BA%E5%88%AB/"},{"title":"借助AI学习新的编程语言的方法","text":"最近因工作需要在学习Go和Python，自我感觉学习的比较快，能快速上手并做项目开发，有些方法沉淀，并具有通用性，故作此记录。 Part 1 学习一个新的编程语言需要关注什么？（回答这个问题，你需要有其他编程语言的多年开发经验，比如我有8年的Java开发经验） 编程语言的基本关键字，如int for break等 分支语句的写法，如if-else, 循环, switch 基本类库，如集合，数组，map等 主流的框架（了解即可） OK，上面的内容，如果你有其他编程语言的基础，是很快可以了解的，注意，这里是了解即可，不需要死记硬背，仅需要了解，心里有个谱。 Part 2 接下来，重点来了：直接上代码。 在干代码的过程，会不断遇到新问题，此时，直接问GPT-4o即可，反复问，反复重复这个过程。 GPT基本可以解决你的绝大多数疑问。 这个有个关键点，就是需要“问对问题”，即prompt。此时，就需要你有其他语言的编程基础，否则，你是很难表达清楚自己的疑惑。 Part 3 我用这个方法学习了Go语言、Python语言。也推荐了朋友用这个方法学习SQL（他在学习数据分析，他需要了解基本SQL的语法，即可不断重复Part 2）。 总结下，关键点是有个“AI编程老师”，能及时解决自己在学习过程中遇到的问题。一定需要是及时，因为对于初学者，一个问题拖过2天，或者积压3个问题，就属于负重前行了。","link":"/2024/11/14/%E6%8A%80%E6%9C%AF/%E5%80%9F%E5%8A%A9AI%E5%AD%A6%E4%B9%A0%E6%96%B0%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E6%96%B9%E6%B3%95/"},{"title":"技术名词积累","text":"Fail-Fast机制fail-fast 机制是Java集合(Collection)中的一种错误机制。 在用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的结构进行了修改（增加、删除），则会抛出Concurrent Modification Exception（并发修改异常）。 Java魔法类：Unsafe 如上图所示，Unsafe提供的API大致可分为内存操作、CAS、Class相关、对象操作、线程调度、系统信息获取、内存屏障、数组操作等几类，下面将对其相关方法和应用场景进行详细介绍。 解决线程同步问题的思路 互斥同步 加锁：synchronized 和 ReentrantLock。 非阻塞同步 CAS AtomicInteger 无同步方案 要保证线程安全，并不是一定就要进行同步。如果一个方法本来就不涉及共享数据，那它自然就无须任何同步措施去保证正确性。","link":"/2024/02/23/%E6%8A%80%E6%9C%AF/%E6%8A%80%E6%9C%AF%E5%90%8D%E8%AF%8D%E7%A7%AF%E7%B4%AF/"},{"title":"有用的软件工具","text":"一、marker地址：https://github.com/VikParuchuri/marker 一个命令行工具，将 PDF、EPUB、MOBI 文档转成 Markdown 文件，必要时会进行 OCR（文字识别）。","link":"/2024/04/28/%E6%8A%80%E6%9C%AF/%E6%9C%89%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"},{"title":"记一次ssh和github连接失败的问题","text":"本地执行git pull时，报错： 12Git PullConnection closed by 127.0.0.1 port 7890 补充信息：我的mac电脑安装了ClashX代理软件，因为平时在执行mvn编译或者git拉代码时，有时出现网络不通，此时通过代理能加快软件安装、编译。网上查询解决办法： 让通过unset all_proxy http_proxy命令取消代理；（尝试不行） 通过github官方文档；（走了一遍，不行） 搜到的解决方法：# 【git】解决：Failed to connect to 127.0.0.1 port 7890: Connection refused（跟我的问题，看起来一样，但是依然未解决）最后的解决办法：ChatGPT一直让我关闭代理，于是，我尝试配置ClashX为直连，问题解决了。 这个问题，耽搁了一个多小时，反思下： 之前开代理时，是可以git pull的； 因此，我反思的方向是，是不是升级了MacOS15导致？ 是不是安装了zsh导致（因为有博客反馈他的问题是出现在zsh上的） 网上的方法解决方法，大部分都是让通过命令行去掉代理，于是我尝试了很多去掉的方法； 之前配置的成功经验，之前配置ssh-key连接github时，非常顺利； 昨天遇到同样的问题，用同样的步骤，解决了，但今天死活不行； PS，也许明天莫名其妙又不行了。。。 再反思，这一小时能省吗？我觉得不能，有时看公司那些技术大佬，虽然方法论很牛逼，但是处理起具体问题时，效率未必有你高。因为踩过的坑不一样，现在遇到的那些坑，可能那些技术大佬也是新手。","link":"/2024/11/14/%E6%8A%80%E6%9C%AF/%E8%AE%B0%E4%B8%80%E6%AC%A1ssh%E5%92%8Cgithub%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/"},{"title":"【转载】SMART目标模板","text":"原文地址： https://www.tableau.com/zh-cn/learn/articles/smart-goals-criteria Specific（具体的）在创建 SMART 目标时，请尝试回答如下问题： ​ • 我们计划中的具体步骤是什么？ ​ • 谁是实现目标不可缺少的人？ ​ • 我们需要在什么地方付诸努力？ ​ • 为什么这对于我们的长期策略而言很有价值？ ​ • 与其他目标相比，我们需要怎样优先关注此目标？ Measurable（可衡量的）在创建 SMART 目标时，请尝试回答如下问题： ​ • 我们需要什么数据？ ​ • 我们的数据将存储在哪里，以及我们将如何访问数据？ ​ • 我们的数据是否可靠且可验证？ ​ • 什么是合理的进度？ ​ • 怎样判断努力程度是否足够？ ​ • 我们如何知道自己是否已完成目标？ Achievable（可实现的）在创建 SMART 目标时，请尝试回答如下问题： ​ • 实现此目标的必需步骤是什么？ ​ • 我们对于实现此目标的直接控制程度是多少？ ​ • 与以前的绩效相比，此目标是否切合实际？ ​ • 有什么先例？ ​ • 我们为什么认为此目标是可实现的？ ​ • 什么外部（和内部）因素可能会阻止我们实现此目标？ Realistic and Relevant（实际的和相关的）在创建 SMART 目标时，请尝试回答如下问题： ​ • 为什么将此目标设定为当前目标？ ​ • 为什么之前未设定此目标？ ​ • 谁是实现此目标的合适人选？ ​ • 此目标将如何推进长期策略？ ​ • 什么是预期的投资报酬率 (ROI)？ ​ • 如果我们未能实现此目标，意味着什么呢？ Time-bound（有时限的）在创建 SMART 目标时，请尝试回答如下问题： ​ • 此目标是否可以在给定的时间范围内实现？ ​ • 实现此目标的最长时间和最短时间是多久？ ​ • 哪些潜在的阻碍因素或与时间相关的因素可能会延缓进度？ ​ • 我们过去在相似时间范围内完成过哪些目标？ ​ • 我们何时检查进度以及如何检查进度？ ​ • 如果我们中途偏离路线该怎么办？ ​ • 进度是否会在某些时间自然放缓或加快？","link":"/2024/03/25/%E6%96%B9%E6%B3%95%E8%AE%BA/SMART%E7%9B%AE%E6%A0%87%E6%A8%A1%E6%9D%BF/"},{"title":"一种利用思维导图分析与解决问题的方法","text":"思路如下图： ​ 将需要完成的目标的具体实现步骤，梳理出来，越具体越好，梳理的时候需要用逻辑思维推理，完成了这一步，是否能到下一步，如果不能，还需要什么，逻辑关系提前在脑子里理顺了，实现起来也就不会因中途某一步卡住阻塞，打断。 ​ PS：这个思路灵感来自与QA（软件测试）在写测试用例时，会提前将需要测试的每一步梳理出来，拉产品、研发评审，之后等测试时就完全按照这个测试用例执行了。","link":"/2024/01/21/%E6%96%B9%E6%B3%95%E8%AE%BA/%E4%B8%80%E7%A7%8D%E5%88%A9%E7%94%A8%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%96%B9%E6%B3%95/"},{"title":"【转载】分析自己的做事动机","text":"我最近琢磨出一个万能的社交法则，就是不要去分析对方的动机，对方是怎么想的，不重要，不重要。 你就研究你自己就行了，你想要什么？想从对方那得到什么？你愿意拿出什么交换？你的底线在哪里？你无法忍受的东西是什么？你就搞懂你自己就行了。 然后你根据自己的需求和感受，在和别人不断的磨合和博弈中建立自己的一套规则，合作的开心相处愉快的你就继续保持，让你让你不舒服了，该谈判谈判该争吵争吵过，如果对方依旧死性不改，那就翻脸绝交。 最最重要的是把自己的感受放在第一位，只要你感觉不舒服，只要你利益受损，你就要开始从新制定规则。至于对方是无意的还是有意的？一时兴起还是蓄谋已久？ 这! 都! 不! 重! 要！ 你不需要去过多的分析他们的动机，这种东西迷惑性太大了，分析别人做事的动机的这种苦差事，审讯室的警察，专业搞咨询的心理医生都要分析好几个来回，还不一定能找准，你一个非专业人士，给自己上那种高难度的问题折磨自己干什么？ 你在所有关系里只需要这在乎一件事就行了：你有没有不舒服？你吃亏了没有？ 你唯一的任务就是让自己爽，谁让你不爽你就办他，时刻尊重自己的感受维护自己的利益就行了。","link":"/2024/03/26/%E6%96%B9%E6%B3%95%E8%AE%BA/%E5%88%86%E6%9E%90%E8%87%AA%E5%B7%B1%E7%9A%84%E5%81%9A%E4%BA%8B%E5%8A%A8%E6%9C%BA/"},{"title":"如何做一件事","text":"最近发现自己做事，有头无尾，有始无终。比如说健身，看了一些视频，买了一堆装备，去了几次，就慢慢频率减少，直到不去了；准备看看机会，做了简历，制定了复习计划，又慢慢没有了下文了；还有好多事，也是类似。 于是思考可能的原因，推测，是对要完成的事情没有一个清晰的认识，没有想清楚这件事做成之后，我是一个什么样的状态，周围的事物是一个什么样的状态，周围的人会是一个什么样的状态。","link":"/2024/02/25/%E6%96%B9%E6%B3%95%E8%AE%BA/%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E4%BB%B6%E4%BA%8B/"},{"title":"第二大脑的系列工具","text":"人脑是一个复杂的机器，但很遗憾，人记忆的东西会随着时间而减弱，人不像内存和磁盘那样可以长时间保存一段信息。 那如何能克服人记忆的不足，将所有事情和知识安排得井井有条呢？ 答案是第二大脑 任何知识管理都可以分为如下三个步骤： 收集 整理 搜索 在做这几个事情时，我主要使用如下几个工具： 收集滴答清单，将想要看的文章链接、想要做的事，都放在滴答清单，用它来提醒我有哪些事应该做，毕竟是GTD软件嘛。 整理&amp;搜索这块断断续续换过好几个软件，目前在用Obsidian，因为它的定位就是第二大脑，双向链接。 分享软件 博客搭建使用：hexo 博客编辑使用：Typora 资源托管在GitHub分享流程：将Obsidian写的文章，copy到Typora中，稍作修改（删除敏感信息）后，用hexo g发布。","link":"/2024/07/29/%E6%96%B9%E6%B3%95%E8%AE%BA/%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91%E7%9A%84%E7%B3%BB%E5%88%97%E5%B7%A5%E5%85%B7/"},{"title":"2024节后上班第二天","text":"节后第二天，坐在工位不知道怎么开始干活，感觉要做的需求收益很低，但又不能不做；想看看机会，又不想在工位明目张胆，坐如针毡，非常难受。百无聊赖，写点东西，平复下心情。","link":"/2024/02/21/%E6%9D%82%E8%B0%88&%E9%9A%8F%E7%AC%94/2024%E8%8A%82%E5%90%8E%E4%B8%8A%E7%8F%AD%E7%AC%AC%E4%BA%8C%E5%A4%A9/"},{"title":"【转载】B 道选手","text":"几年前，我参加了一个游泳训练营。 所有人在一个泳池训练，按照水平分在四个泳道：A 道（游得最快的人）、B 道（次快）、C 道（次慢）和 D 道（最慢）。 我从 D 道开始，接受了大量的指导。周围的人都对我很好，我慢慢进步，终于进入了 C 道。那组的人也热情欢迎我。 但是，我注意到，旁边 B 道的人并不像 C 道那样友善。A 道选手都非常友善，慷慨给予鼓励、表扬和提示。 我怀疑这是普遍现象：A 道、C 道和 D 道的人都很友善，大家几乎都乐于助人；B 道的人则是对 A 道和其他 B 道选手友善，但对 C 道和 D 道则不然。 因为我后来发现，其他运动领域也是如此。那些仅次于顶级选手的运动员，往往对不如自己的选手很苛刻，害怕别人超过自己。 学术界也有这种现象。真正伟大的研究者慷慨而热于助人，许多普通水平的研究者也是这样。然而，那些有一定知名度、但又没有做出顶尖成果的研究者，对不如自己的人就不友善了。 当你是最好的 A 组时，很容易表现得宽宏大量，你确信自己会有成果，这让你安心无忧。 当你处于平均水平或低于平均水平（C 组或 D 组）时，表现得友善也很容易。远离顶尖水平，意味着竞争压力不大，所需要付出的努力可能也不大，你会有一种”放轻松”的心态（反正我到不了顶峰，就当作玩呗）。 那些仅次于优秀水平的人，感受到最大的竞争压力。你离顶峰如此之近，追赶却又艰难无比，放弃又不甘心。最令人沮丧的是，没有人记得第二名。同时，后面的人还可能超过你。所有这些因素，都可能导致一种不友善的态度。","link":"/2024/03/14/%E6%9D%82%E8%B0%88&%E9%9A%8F%E7%AC%94/B%E9%81%93%E9%80%89%E6%89%8B/"},{"title":"从币安亏钱谈谈投入产出","text":"如题，币安亏钱了，反思自己投资加密货币，投资A股基金，都是亏钱，但是为什么有人赚钱，而且群里认识的人，通过玩加密货币也财富自由了。 在思考，自己很多行为都是跟风，“认知”和“底层逻辑”自己没有搞明白，看别人入了，自己就入。 关于赚钱，想到今年公司发年终奖，绩效A的同学能有6-7个月工资，绩效S者甚至能拿到10-20个月。 “精力分配”问题。为什么有人能持续获得A绩效，并且在工作上还有一个好人缘？如果在这些投机的事情上很难取得成功，那么尝试将精力分配到工作上，你能否拿A或者S？这是一个值得思考和实践的事。","link":"/2024/05/05/%E6%9D%82%E8%B0%88&%E9%9A%8F%E7%AC%94/%E4%BB%8E%E5%B8%81%E5%AE%89%E4%BA%8F%E9%92%B1%E8%B0%88%E8%B0%88%E6%8A%95%E5%85%A5%E4%BA%A7%E5%87%BA/"},{"title":"从面试被挂聊聊职业规划","text":"前几日面试了字节跳动海外某个研发部，一面被挂，倒不是因为我回答不好，只是没有适合我的坑。 面试内容是这样的 字节一面（项目） 自我介绍 想了解下背景，为什么这个时候选择看机会？期望下一份工作是怎样的？ 说下你熟悉的项目（然后就项目聊了20min）。 编程题：leetcode23题，合并K个有序的链表，hard难度； 除了第2问，当时把我问的有点懵之外，回答的有些不流畅，其他我回答的都还行，项目问题自然是没问题，编程题，我用了两种方式实现。 在最后提问环节，我问面试官，为什么会有“第2问”，面试官也坦诚告诉我，想了解下动机，以及如果我入职，能在他们团队做什么。 反思一下，自己今年30岁了，工作8年，已经不是3-5年经验那种很受欢迎的类型了。 为什么跳槽？期望是什么？对方公司能否满足你的期望？都是一个很重要的考量项，而不是简单的“能干活就行”。","link":"/2024/07/11/%E6%9D%82%E8%B0%88&%E9%9A%8F%E7%AC%94/%E4%BB%8E%E9%9D%A2%E8%AF%95%E8%A2%AB%E6%8C%82%E8%81%8A%E8%81%8A%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"},{"title":"写在30岁生日","text":"​ ​ 一晃30岁了，取得了一些令自己值得说的成绩，但也有很多想在30岁之前完成事，做了但没有预期的结果。 ​ 发现还是对自己不够了解。比如自己擅长什么，不擅长什么，喜欢什么，不喜欢什么，一下子是想不出来的。","link":"/2024/01/21/%E6%9D%82%E8%B0%88&%E9%9A%8F%E7%AC%94/%E5%86%99%E5%9C%A830%E5%B2%81%E7%94%9F%E6%97%A5/"},{"title":"新买的一台MacBook Air","text":"新买了一台MacBook，定位是阅读&amp;写作。 安装了Reader、Cubox等软件做阅读和批注，ReadWise做提醒。 还有Typora用来写博客，并配置了GitHub Page和域名，写完之后用脚本直接发布到GitPage。","link":"/2024/05/01/%E6%9D%82%E8%B0%88&%E9%9A%8F%E7%AC%94/%E6%96%B0%E4%B9%B0%E7%9A%84MacBook%20Air/"},{"title":"聊聊关于升职晋升","text":"最近这几天是公司的晋升季，看到了一些我觉得挺有意思的事。 同事A参与了晋升答辩，答辩结束后我听到他leader告诉他，“人家评委问你当时有什么难点，你回答的一点都不好，你应该往xx上面引，说那些~~巴拉巴拉”。 我也参与过晋升答辩，我当时也被这么说过，后来想想，“我当时在做这件事时，并没有觉得有什么特别大的难点，当时遇到了一个个很多小问题，说难吧？不难，说简单吧，你得花时间去推进。”比如和某个兄弟团队对接，比如写个xx算法，比如测试环境阻塞流程等等，但回过头来看，这么一大堆事，能做好确实不容易。 很多时候，尤其是往高职级，不是因为你做了什么才给你升职，而是因为要给你升职，才会给你安排重点项目。 一般晋升答辩的思路： 我在做某某项目； 这个项目有多难； 我是咋解决的； 把这个项目推进上线后取得了多少多少收益。 有时候觉得晋升还不如改成下面这样： 我们组总得提报几个晋升吧？不升我升谁？ 我和那谁差不多，那谁都升职了；我比他还强，不升我升谁？ 答辩过程，就是走个流程的事。 但这个方案行吗？肯定不行，因为这样会导致，下属给领导送礼，领导给下属升职，相互合作，结果公司买单。 那第一个方案行吗？答案也不行，因为这样大家会做华而不实的PPT，我司已经有了，低职级的PPT非常高大尚，让人看完很明显发现这不可能是他一个人做的。 我想过一种方案，比较民主的投票。晋升过程如下： 直属领导背书提报； 晋升者整理过去所做的事，能够证明，你达到了下一个阶段的能力模型； 评委对文档进行打分评审； 全员公示，由全员进行投票，确认他是否能晋升。 第4步是最关键的，这样能避免“只唯上”的员工出现。你的身边有没有这样的同事，上司的消息他们秒回，秒处理。但是，他们回复、处理同级合作同事的消息就很慢（虽然我也是这样子的，我觉得公司的文化流程机制把人引导成这样的）。 一个公司的员工薪资也遵循二八定律，20%的员工，拿了80%的薪酬总包；而拿了20%薪酬的人，却干了80%的活。","link":"/2024/03/22/%E6%9D%82%E8%B0%88&%E9%9A%8F%E7%AC%94/%E8%81%8A%E8%81%8A%E5%85%B3%E4%BA%8E%E5%8D%87%E8%81%8C%E6%99%8B%E5%8D%87/"},{"title":"记一次有意义的面试","text":"​ 今天晚上面试了淘天风控，原计划1小时的面试，实际聊了1小时40多分钟，其中有一些对我很有收获的问题。同时也觉得这些问题对其他职场人都值得思考。 关于博客、知识库的更新问题​ 面试官看了我简历上的关于AIGC知识库和CSDN博客，但前者去年下半年停更。CSDN博客，也自我入职快手开始，基本都停更了。问我为什么会停更，并且写在简历上以为是个加分项，但看到停更也挺有遗憾。我的回答是这样的：​ 对于AIGC知识库停更，原因一：23年下半年AIGC国内大模型百花齐放，各种工具也是层出不穷，追热点的话，我们是追不过来；原因二：同时23年下半年我个人工作上的事情太忙了，经常加班到晚上10点、11点。​ 对于CSDN技术博客停更，原因一：加入快手后，太忙了，基本平时都是晚上10点下班；原因二：之前记录的技术文章，都是偏基础的，更像是自己的学习笔记，后面觉得这种技术文章，随便再网上就能搜到很详细的资料，因此也就慢慢不写技术博客了，但是对于一些重要的资料，自己会记录私密文档， 不在公开了。​ 我自己现在的思考：加班短期能让自己在工作上获取更多的收获，但是长期来看，会抢占自我提升的时间，对个人来说，得不偿失，对公司来说，多少紧急项目只是中层老板脑袋一拍，上线两个月就没人用了，还持续占用着服务器资源；第二，有意义的事情，请坚持！！ 关于“八爪鱼理论”​ 面试官说：你简历我详细看了，有在风控做横向风控系统，23年在做电商审核，这些是内容方面的治理，我想问些你简历上没有的，看你有没有了解。你在23年做电商审核的时候，有没有了解电商垂直域的风控是怎么做的？规模是怎么样的？​ 面试官补充，他之所以这么问，是他觉得，人应该像个八爪鱼一样，把触手伸向四方，有机会的话，就会了解各个相关的知识。​ 这个问题，我确实没有思考过，也没有主动去了解过电商垂直域业务风控。当时听完这个之后，我就知道自己和“领域专家”的差距了。​ 面试的问题先到这，顺着这个问题，我再来想想什么是“领域专家”，以及为什么有些程序员在工作10年后，很难找到工作，而有些人却能被高薪挖走。可能原因就在这里，需要有个“八爪鱼”的好奇心，关心行业上下游，关注能解决什么问题。​ 也可以换个角度想这个问题，假设让你干你+2的工作，你平时都会想些什么？看些什么？这些应该是一个工作8~10年的人应该思考的的问题。 关于他建议我去的团队​ 面试官说：其实我觉得你非常适合去电商垂直域的风控大部门下，做工程小组的小组长，不知道你有没有这么想过。理由是，你有风控横向平台能力的经验，如果再去电商风控垂直域去做工程，会比其他同学有很大的优势。​ 这点也是我之前没有想过的，受益匪浅。我自己确实也没有这么深入地分析过自己的优势，以及这个优势能给我带来什么。 提问环节我请教面试官提问1:历史债很重业务如何保证稳定性？我们之前做降本增效，确实节省了资源，但是却使稳定性降低，出现了P1故障。 回答：他们过去两年将底层架构重新重构了下，现在在做应用层技术改造就不容易出现系统性风险。当然，这个事是长期的，需要大老板支持。 提问2:您平时如何学习？怎么了解一些新技术？如何把新技术或工具应用到业务中？回答：就像刚才提到的八爪鱼理论，平时会关注一些新的技术文章等内容。比如，之前看到内部团队有关xx的技术分享，正好想到自己的业务中可以尝试使用。总结一下，就是多关注不同的事物，多想，自然就会有灵感。 提问3:平时加班到9点、10点，如何平衡工作和生活，处理和家人的关系？回答：他会要求他的团队（北京和杭州），除了特殊情况，日常最晚在8点半下班。他会用下班时间，更多陪陪家人。但是，在下班时间，也会看一些行业新闻、咨询之类，如果和业务中遇到的事情有相关性，也会专门再花时间深入调研。总结一下，就是不会低效加班磨时间，但休息时间，也会思考工作。","link":"/2024/09/26/%E6%9D%82%E8%B0%88&%E9%9A%8F%E7%AC%94/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%89%E6%84%8F%E4%B9%89%E7%9A%84%E9%9D%A2%E8%AF%95/"},{"title":"李笑来的书读后感","text":"最近在看李笑来的书，书中一些观点对我挺有启发。这里整理一些。 《把时间当作朋友》https://lixiaolai.com/#/befriending-time/ 核心理念 时间不可管理 主张通过心智成长实现自我管理，强调积累的力量而非速成技巧 积累方法论 所有能力都需长期积累（如作者自述从零学英语到斯坦福留学的经历） 朱敏序言以17年创业历程印证”持续成功=正确方法+长期坚持” 重要认知 破除成功学迷思 拒绝基于比较的成功观（俞敏洪序：伟大人生由平凡日子堆砌） 成长比成功更重要，成长是人人可达的目标 现实认知 承认”生活本就艰难”的客观现实（第1章核心论点） 接受现实是理性决策的基础 实践体系 心智工具 任务管理：结合SMART原则的长期规划（第3章） 学习闭环：经验记录+定期复盘（第6章方法论） 执行策略 勤奋标准：达到”忘记时间存在”的专注状态（第7章案例） 坚持机制：构建可量化的进度追踪系统 经典隐喻 马拉松理论 ：短期速成不如持续进步（朱敏序） 雄鹰与蜗牛 ：不同起点同样成就（俞敏洪序） 《自学是门手艺》https://lixiaolai.com/#/the-craft-of-selfteaching/ 核心理念 元学习能力论 书中提出”学习学习的能力比学习本身更重要”（第1章），通过Python编程案例演示如何建立可迁移的学习方法论 刻意练习体系 知识拆解：将复杂技能分解为可执行的”最小知识单元”（第3章） 反馈机制：构建”代码即笔记”的实时反馈系统（第5章案例） 实践框架 三维学习模型 时间维度：建立”时间晶体”式学习节奏（每日30分钟×100天） 空间维度：构建跨平台知识图谱（GitHub+Anki+Obsidian） 认知维度：实施”概念重构”训练（第7章方法论） 抗挫折机制 错误资产化：将编程报错转化为学习案例库（第9章） 心理建设：接受”debug时间＞编码时间”的客观规律（第11章） 《韭菜的自我修养》https://lixiaolai.com/#/the-self-cultivation-of-leeks/cn/ 一、什么是“韭菜”？ 韭菜 = 在交易市场中赔钱的小散户。 韭菜的本质问题不是钱少，而是思维模式错误：把非零和游戏当成零和游戏来玩。 二、韭菜的典型特征 特征 说明 一进场就买买买 牛市尾巴冲进去，结果高位接盘。 频繁交易 越交易越亏，被手续费吃掉。 不设止损 不设止损线，亏到底。 幻想一夜暴富 不做研究，只想“抄底逃顶”。 情绪化交易 涨了就狂，跌了就慌。 把交易当成零和游戏 认为“我亏的钱一定被别人赚走了”，于是充满怨念。 三、如何摆脱“韭菜”命运？ 方法 具体建议 认清现实 这不是零和游戏，而是周期游戏（牛熊交替）。 降低交易频率 越频繁交易越接近韭菜，越少交易越接近赢家。 提高实力 拥有长期稳定的低成本现金流，不借钱、不加杠杆。 学会等待 熊市慢慢买，牛市不追高。 独立思考 不听消息、不跟风，自己做研究。 止损止盈 设置合理的止损线（参考标的物的日常波动幅度）。 控制仓位 永远保留一部分现金，永远不All-in。 孤独交易 不跟群、不讨论，独立思考、独立决策。 认真生活 不把交易当全部，保持生活、工作、学习的节奏。 四、作者的核心观点总结 “韭菜”不是亏钱的散户，而是那些用错误思维在交易市场里不断犯错、又不断合理化自己错误的人。 真正的交易者，是那些认清市场本质、控制情绪、不断学习、耐心等待、独立思考的人。 五、一句话总结这本书 你不是韭菜，你只是差点成了韭菜。 如果你想快速掌握这本书的精髓，记住一句话就够了： “在交易市场里，活得久比赚得快更重要。” 《微信互联网平民创业》https://github.com/xiaolai/everyones-guide-for-starting-up-on-wechat-network 《微信互联网平民创业》是一本关于如何通过微信生态实现平民创业的实用指南，核心思想是帮助普通人利用微信这个完整的商业生态系统，长期持续赚钱，最终成为“平民头部”（简称“平头”）。 一、核心观点总结 主题 核心观点 微信是什么？ 微信不仅是社交工具，更是一个完整的商业生态，覆盖社交、支付、内容、交易，是“平民创业的最佳阵地”。 平民如何赚钱？ 通过卖货、卖课、卖服务，利用微信提供的“屏幕”（朋友圈、视频号、直播、小商店等）打造长期可持续的收入。 最重要的能力 不是机会、不是本钱，而是识别长期价值的能力、只做公平交易的底线、以终为始的决策能力。 内容创作策略 平民要做“有用+有趣”的内容，保持平民本色，不追求完美，真诚分享，形成个人品牌。 客户终生价值（CLV） 一个客户一生能为你带来多少利润？这是衡量生意是否值得做的核心指标。 退而求其次 如果卖不了货、讲不了课，就做本地内容或小区号，从服务身边人开始，逐步扩大影响力。 定投思维 把“锻炼”、“读书”、“投资”、“帮朋友”、“陪家人”都当作长期定投，积累复利。 二、内容结构速览 章节 主要内容 0-2章 微信已吞噬世界，平民应把它当作商业平台，而非仅仅是社交工具。 3-5章 微信提供的“屏幕”：朋友圈、视频号、直播、小商店，是免费的广告位，长期价值巨大。 6-7章 选择比努力更重要，要用“以终为始”的思维，选择最大市场（如母婴、食品、美妆）。 8-10章 如果不能卖货或卖课，就退而求其次：做本地号、小区号，积累客户终生价值。 11-12章 如何做内容：平民本色+价值导向+真诚社交，利用微信的熟人传播机制。 13-18章 先做人再做事：成为值得信赖的人，剔除讨好型人格，保持长期原则。 19-22章 合作性能：不给人添麻烦，乐于分享，长期积累，最终成为“赢得起”的人。 三、实操建议清单（可直接执行） 步骤 行动建议 1. 定位 选择一个高CLV的品类（如母婴、食品、保健品），做本地内容或小区号。 2. 内容 每天发1条有用+有趣的视频或图文，坚持半年。 3. 加人 把微信加满5000人，优先加本地居民，建立信任。 4. 变现 先用微信小商店卖实物，再逐步卖课或服务。 5. 长期 每天锻炼、读书、帮1个人，积累个人品牌和信任。 四、一句话总结 “平民创业的核心不是追风口，而是长期积累信任、价值和人脉，最终成为被很多人‘热爱’的‘平头’。” 如果你想进一步行动，我可以帮你： 选一个适合你的品类和方向； 设计你的第一条视频号内容； 制定一个90天的执行计划。 《新生-七年就是一辈子》https://b.xinshengdaxue.com/Preface.html 一、书名含义 “新生”：双关语 新的学生：作者一生自认职业只有“学生”，社群成员亦然。 新一辈子：每七年相当于一次“重生”，人生可以多次重启。 二、核心理念 关键词 解读 七年就是一辈子 每掌握一项新技能，人生就进入一个新的阶段，相当于“重生”。 学习=重生 学习不可逆，若未改变生活，等于没学会。 进步方法论 作者反对“鸡汤”污名化，认为所谓鸡汤其实是“进步的方法论”。 持续迭代 这本书并非一次性完成，而是持续更新、递归迭代的“活书”。 三、写作背景与过程 起点：2010年5月，作者在博客写下《未知的必然、必要和必需》，首次提出“学习学习再学习”。 反复尝试：2012、2014年两次尝试写作均未满意。 最终成型：2015年8月开通微信公众号“学习学习再学习”，持续写作，年底积累超10万字，形成本书。 四、内容特色 真实经历：大量采用作者亲身经历，拒绝虚构故事。 非线性结构：内容递归、循环引用，需前后对照阅读。 社群共建：未来将有更多作者加入，结构会持续调整。 五、作者经历映射的“七辈子” 年龄段 掌握技能 对应身份 0-21岁 学会学习 学生 21-28岁 学会销售 销售、批发商 28-35岁 学会传递知识 新东方教师 35-42岁 学会创业与投资 创业者、投资人 42岁+ ？ 社群组织者、作者 六、作者的三本书之间的关系 书名 核心主题 定位 《把时间当作朋友》 如何正确思考 “道” 《学习学习再学习》 如何学习（未完成） “术” 《新生——七年就是一辈子》 如何自学与重生 “道+术”的融合 七、社群愿景 不再孤独：通过真实经历与方法论，聚集一群“终身学习者”，相互陪伴、共同成长。 从个体到群体：先改变自己，再带动他人，形成“重生”的连锁反应。 八、一句话总结 《新生——七年就是一辈子》是一本用真实人生写成的“自学指南”，它告诉你：每七年，你都可以重启人生，只要你愿意持续学习、不断重生。 《定投改变命运》原书地址：https://ri.firesbox.com/#/cn/ 书的核心原则定投，只买不卖，长期肯定盈利很多。 长期的定义2个大周期，股市是1015年；区块链数字货币是68年。 我对核心原则的疑问对“只买不卖”的疑问，如2025年2月，美股跌那么狠，如果我明知道未来2个月要跌，为什么不卖了等未来再买回来。我定义了一个数学场景： 如果我在定投时，判断未来2个月会有50%的概率会持续跌（当然也有50%的概率涨），那我将已经持有的50%的资产卖出，并在未来两个月持续每天定投买入。那长期来看，这样操作的收益是否比一直持有而不频繁买卖的收益高？ 结论是没变要。理由： 50%的概率不是确定的； 2个月时间不是确定的，万一卖了，结果未来两个月一直涨，但3个月后突然跌； 有手续费 耗费个人心力，会很累（书的原话是没有性生活） 我之前也有了解银行螺丝钉的书，他的策略是，低估加仓买，合理估值少买或不买，高估值分批卖出。我觉得更有实操性，这样避免了频繁操作，以及跌的趋势我们能止赢。 其他以上内容，你可以直接将本篇文章丢给大模型，比如将这个网页地址发给Kimi或者其他AI对话客户端（Cherry Studio等），或者将具体的链接发给大模型，用多轮对话的形式，持续追问，来完成“别人知识”和自己知识建联的作用。","link":"/2025/08/03/%E8%AF%BB%E5%90%8E%E6%84%9F/%E6%9D%8E%E7%AC%91%E6%9D%A5%E7%9A%84%E4%B9%A6%E8%AF%BB%E5%90%8E%E6%84%9F/"},{"title":"读书清单","text":"这两天看了查理芒格的一段话，“我这辈子遇到的聪明人，没有一个不每天阅读的。”今天是2024.7.30了，反思自己这段时间确实很少完整的看书了，因此想整理一个对于我的读书清单，利用接下来这段时间好好读读书。 分各类整理吧 思维&amp;认知 李笑来《财富自由之路》 《毛选》部分内容 陈立飞《个体崛起》中的部分内容 结构化表达&amp;想清楚 芭芭拉明托的《金字塔原理2本》，原理+实践 PS，先这样吧，以后想起来，再更新","link":"/2024/07/30/%E8%AF%BB%E5%90%8E%E6%84%9F/%E8%AF%BB%E4%B9%A6%E6%B8%85%E5%8D%95/"},{"title":"读后感：个体崛起","text":"这本书中，有对时间管理的认识，有对金钱的看法，有对职场经验的分享。整体上说，这本书还是对我有启发，尤其是在职场部分，例如《工资是职场最大的陷阱》。有时间的也可以看看，虽然这本书没有说明具体要如何做，但至少说了要做什么好。 没时间的话，可以抽空看看以几篇，这是我觉得还不错的文章（这些小章节均相互独立，百度即可搜到）。 《要赚未来的钱》 《你笑他们太low，他们笑你不懂》 《高收入都是睡出来的》 《摆脱低水平的勤奋陷阱，获得高水平的反思能力》 《为什么别人是高管，你至少员工》 《请警惕你的“弱者思维”》 《不忘初心？也许“初心”没那么重要》 《工资是职场最大的陷阱》 《你的收入为什么还没有指数增长？》 偶然翻到自己在5年前写的读后感，人的记忆确实不靠谱，因为要不是翻到这篇读后感，我忘记了自己读过这本书，即使现在翻到这篇读后感，也忘记了每篇的内容是什么了。^_^","link":"/2024/01/26/%E8%AF%BB%E5%90%8E%E6%84%9F/%E8%AF%BB%E5%90%8E%E6%84%9F%EF%BC%9A%E4%B8%AA%E4%BD%93%E5%B4%9B%E8%B5%B7/"}],"tags":[{"name":"tag1","slug":"tag1","link":"/tags/tag1/"},{"name":"tag2","slug":"tag2","link":"/tags/tag2/"},{"name":"微博","slug":"微博","link":"/tags/%E5%BE%AE%E5%8D%9A/"},{"name":"转载","slug":"转载","link":"/tags/%E8%BD%AC%E8%BD%BD/"},{"name":"感悟","slug":"感悟","link":"/tags/%E6%84%9F%E6%82%9F/"},{"name":"随笔","slug":"随笔","link":"/tags/%E9%9A%8F%E7%AC%94/"}],"categories":[{"name":"categorie1","slug":"categorie1","link":"/categories/categorie1/"},{"name":"技术","slug":"技术","link":"/categories/%E6%8A%80%E6%9C%AF/"},{"name":"工具","slug":"工具","link":"/categories/%E5%B7%A5%E5%85%B7/"},{"name":"categorie2","slug":"categorie1/categorie2","link":"/categories/categorie1/categorie2/"},{"name":"AI","slug":"AI","link":"/categories/AI/"},{"name":"weibo","slug":"weibo","link":"/categories/weibo/"},{"name":"方法论","slug":"方法论","link":"/categories/%E6%96%B9%E6%B3%95%E8%AE%BA/"},{"name":"随笔","slug":"随笔","link":"/categories/%E9%9A%8F%E7%AC%94/"},{"name":"读后感","slug":"读后感","link":"/categories/%E8%AF%BB%E5%90%8E%E6%84%9F/"}],"pages":[{"title":"","text":"1 2 3 0 4 5 6 Del 7 8 9 OK new Vue({ el: '#app', data: function () { return { problem: '', answer: '', num1: null, num2: null, symbol: null } }, methods: { //输入数组展示到结果栏 onClick(number) { this.answer = this.answer + number; }, //删除逻辑 subLast() { this.answer = this.answer.substr(0, this.answer.length - 1); }, submit() { var result; switch (this.symbol) { case '+': result = this.num1 + this.num2; break; case '-': result = this.num1 - this.num2; break; case '*': result = this.num1 * this.num2; break; case '/': result = this.num1 / this.num2; break; } //结果比较，只考虑整数 if (parseInt(this.answer) === parseInt(result)) { this.$message({ message: '回答正确', type: 'success' }); } else { this.$message.error('回答错误'); } console.log(this.answer); console.log(result); this.answer = ''; this.generateProblem(); }, //随机生成= - * / generateSymbol() { var random = Math.random(); if (0 < random && random","link":"/calculate.html"},{"title":"","text":"目标倒计时 * { margin: 0; padding: 0; box-sizing: border-box; } body { font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'SF Pro Text', 'Helvetica Neue', Helvetica, Arial, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; display: flex; align-items: center; justify-content: center; padding: 20px; color: #1d1d1f; } .container { background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-radius: 24px; padding: 40px; box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1); text-align: center; max-width: 600px; width: 100%; border: 1px solid rgba(255, 255, 255, 0.2); } .title { font-size: 2.5rem; font-weight: 700; margin-bottom: 16px; background: linear-gradient(135deg, #667eea, #764ba2); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; } .subtitle { font-size: 1.1rem; color: #6e6e73; margin-bottom: 40px; font-weight: 400; } .countdown-container { display: grid; grid-template-columns: repeat(6, 1fr); gap: 15px; margin-bottom: 30px; } .countdown-row { display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; margin-bottom: 15px; } .countdown-row:last-child { margin-bottom: 0; } .time-unit { background: rgba(255, 255, 255, 0.8); border-radius: 16px; padding: 20px 12px; box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1); border: 1px solid rgba(255, 255, 255, 0.3); transition: transform 0.3s ease, box-shadow 0.3s ease; } .time-unit:hover { transform: translateY(-4px); box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15); } .time-number { font-size: 2.2rem; font-weight: 700; color: #1d1d1f; margin-bottom: 6px; transition: all 0.3s ease; } .time-label { font-size: 0.8rem; color: #6e6e73; font-weight: 500; text-transform: uppercase; letter-spacing: 0.5px; } .seconds-container { display: none; } .progress-bar { width: 100%; height: 8px; background: rgba(0, 0, 0, 0.1); border-radius: 4px; overflow: hidden; margin-top: 30px; } .progress-fill { height: 100%; background: linear-gradient(90deg, #667eea, #764ba2); border-radius: 4px; transition: width 0.3s ease; } .motivation-text { margin-top: 30px; font-size: 1.1rem; color: #6e6e73; font-style: italic; } /* 响应式设计 */ @media (max-width: 768px) { .container { padding: 30px 20px; margin: 10px; } .title { font-size: 2rem; } .subtitle { font-size: 1rem; } .countdown-container { display: block; } .countdown-row { gap: 12px; margin-bottom: 20px; } .time-unit { padding: 16px 8px; } .time-number { font-size: 1.8rem; } .time-label { font-size: 0.7rem; } } @media (max-width: 600px) { .countdown-row { gap: 10px; } .time-unit { padding: 14px 6px; } .time-number { font-size: 1.6rem; } .time-label { font-size: 0.65rem; } } @media (max-width: 480px) { .container { padding: 20px 15px; } .title { font-size: 1.8rem; } .countdown-row { gap: 8px; } .time-unit { padding: 12px 4px; } .time-number { font-size: 1.4rem; } .time-label { font-size: 0.6rem; } } /* 动画效果 */ @keyframes fadeInUp { from { opacity: 0; transform: translateY(30px); } to { opacity: 1; transform: translateY(0); } } .container { animation: fadeInUp 0.8s ease-out; } .time-unit { animation: fadeInUp 0.8s ease-out; } .time-unit:nth-child(1) { animation-delay: 0.1s; } .time-unit:nth-child(2) { animation-delay: 0.2s; } .time-unit:nth-child(3) { animation-delay: 0.3s; } .countdown-row:nth-child(2) .time-unit:nth-child(1) { animation-delay: 0.4s; } .countdown-row:nth-child(2) .time-unit:nth-child(2) { animation-delay: 0.5s; } .countdown-row:nth-child(2) .time-unit:nth-child(3) { animation-delay: 0.6s; } 目标倒计时 距离35A1000W目标完成还有 0 年 0 月 0 日 0 时 0 分 0 秒 每一天的努力都在为梦想添砖加瓦 // 目标日期：2029年1月21日 const targetDate = new Date('2029-01-21T00:00:00'); // 开始日期（用于计算进度） const startDate = new Date('2024-01-01T00:00:00'); // 获取DOM元素 const yearsEl = document.getElementById('years'); const monthsEl = document.getElementById('months'); const daysEl = document.getElementById('days'); const hoursEl = document.getElementById('hours'); const minutesEl = document.getElementById('minutes'); const secondsEl = document.getElementById('seconds'); const progressFillEl = document.getElementById('progressFill'); const motivationTextEl = document.getElementById('motivationText'); // 励志语句数组 const motivationTexts = [ // 正向激励 (25条) '每一天的努力都在为梦想添砖加瓦', '时间是最好的朋友，也是最严厉的老师', '坚持就是胜利，每一秒都值得珍惜', '目标就在前方，继续前进吧！', '今天的努力，是明天成功的基石', '时间不会等待任何人，但我们可以追赶时间', '每一个倒计时都是向目标迈进的一步', '梦想不会自动实现，需要我们用时间换取', '成功不是终点，失败不是末日，重要的是继续前进', '时间是最公平的，每个人一天都有24小时', '不要害怕慢，只要不停下来', '每一次努力都不会白费，时间会证明一切', '目标就像灯塔，指引我们前进的方向', '坚持是一种力量，时间是一种智慧', '今天的你比昨天更接近目标', '时间是最好的投资，努力是最好的回报', '不要因为走得太远而忘记为什么出发', '每一个今天都是余生的第一天', '时间不会倒流，但我们可以把握现在', '成功路上没有捷径，只有坚持和努力', '梦想照进现实，需要时间的积累', '时间是最宝贵的财富，珍惜每一分每一秒', '坚持到底，时间会给你答案', '目标不是用来达成的，而是用来超越的', '时间是最好的老师，教会我们成长', // 反向激励 (25条) '时间在流逝，你还在等什么？', '每一天的拖延都是对梦想的背叛', '时间不会等人，机会也不会', '如果你不行动，时间就会惩罚你', '拖延是梦想的杀手，时间是唯一的解药', '今天不努力，明天就会后悔', '时间是最无情的，它不会因为你的懒惰而停止', '如果你现在不开始，就永远不会开始', '时间在倒计时，你的机会在减少', '每一天的浪费都是对未来的透支', '时间不会原谅你的懒惰，只会惩罚你的拖延', '如果你不珍惜时间，时间也不会珍惜你', '机会稍纵即逝，时间不会重来', '今天的选择决定明天的结果', '时间是最严厉的考官，不会给你第二次机会', '如果你不努力，时间就会抛弃你', '每一天的懈怠都是对目标的背叛', '时间不会因为你的借口而停止流逝', '如果你不行动，梦想就会变成幻想', '时间是最公平的，也是最残酷的', '今天不开始，明天就会更困难', '时间在催促你，你还在犹豫什么？', '如果你不改变，时间就会改变你', '每一天的拖延都是对成功的拒绝', '时间不会等待你的准备，只会惩罚你的犹豫' ]; // 计算时间差 function calculateTimeDifference() { const now = new Date(); const timeDiff = targetDate.getTime() - now.getTime(); if (timeDiff","link":"/goal.html"},{"title":"","text":"canvas爱心 html, body { height: 100%; padding: 0; margin: 0; background: #000; } canvas { position: absolute; width: 100%; height: 100%; } /* * Settings */ var settings = { particles: { length: 500, // maximum amount of particles duration: 2, // particle duration in sec velocity: 100, // particle velocity in pixels/sec effect: -0.75, // play with this for a nice effect size: 30, // particle size in pixels }, }; /* * RequestAnimationFrame polyfill by Erik M?ller */ (function () { var b = 0; var c = [\"ms\", \"moz\", \"webkit\", \"o\"]; for (var a = 0; a < c.length && !window.requestAnimationFrame; ++a) { window.requestAnimationFrame = window[c[a] + \"RequestAnimationFrame\"]; window.cancelAnimationFrame = window[c[a] + \"CancelAnimationFrame\"] || window[c[a] + \"CancelRequestAnimationFrame\"] } if (!window.requestAnimationFrame) { window.requestAnimationFrame = function (h, e) { var d = new Date().getTime(); var f = Math.max(0, 16 - (d - b)); var g = window.setTimeout(function () { h(d + f) }, f); b = d + f; return g } } if (!window.cancelAnimationFrame) { window.cancelAnimationFrame = function (d) { clearTimeout(d) } } }()); /* * Point class */ var Point = (function () { function Point(x, y) { this.x = (typeof x !== 'undefined') ? x : 0; this.y = (typeof y !== 'undefined') ? y : 0; } Point.prototype.clone = function () { return new Point(this.x, this.y); }; Point.prototype.length = function (length) { if (typeof length == 'undefined') return Math.sqrt(this.x * this.x + this.y * this.y); this.normalize(); this.x *= length; this.y *= length; return this; }; Point.prototype.normalize = function () { var length = this.length(); this.x /= length; this.y /= length; return this; }; return Point; })(); /* * Particle class */ var Particle = (function () { function Particle() { this.position = new Point(); this.velocity = new Point(); this.acceleration = new Point(); this.age = 0; } Particle.prototype.initialize = function (x, y, dx, dy) { this.position.x = x; this.position.y = y; this.velocity.x = dx; this.velocity.y = dy; this.acceleration.x = dx * settings.particles.effect; this.acceleration.y = dy * settings.particles.effect; this.age = 0; }; Particle.prototype.update = function (deltaTime) { this.position.x += this.velocity.x * deltaTime; this.position.y += this.velocity.y * deltaTime; this.velocity.x += this.acceleration.x * deltaTime; this.velocity.y += this.acceleration.y * deltaTime; this.age += deltaTime; }; Particle.prototype.draw = function (context, image) { function ease(t) { return (--t) * t * t + 1; } var size = image.width * ease(this.age / settings.particles.duration); context.globalAlpha = 1 - this.age / settings.particles.duration; context.drawImage(image, this.position.x - size / 2, this.position.y - size / 2, size, size); }; return Particle; })(); /* * ParticlePool class */ var ParticlePool = (function () { var particles, firstActive = 0, firstFree = 0, duration = settings.particles.duration; function ParticlePool(length) { // create and populate particle pool particles = new Array(length); for (var i = 0; i < particles.length; i++) particles[i] = new Particle(); } ParticlePool.prototype.add = function (x, y, dx, dy) { particles[firstFree].initialize(x, y, dx, dy); // handle circular queue firstFree++; if (firstFree == particles.length) firstFree = 0; if (firstActive == firstFree) firstActive++; if (firstActive == particles.length) firstActive = 0; }; ParticlePool.prototype.update = function (deltaTime) { var i; // update active particles if (firstActive < firstFree) { for (i = firstActive; i < firstFree; i++) particles[i].update(deltaTime); } if (firstFree < firstActive) { for (i = firstActive; i < particles.length; i++) particles[i].update(deltaTime); for (i = 0; i < firstFree; i++) particles[i].update(deltaTime); } // remove inactive particles while (particles[firstActive].age >= duration && firstActive != firstFree) { firstActive++; if (firstActive == particles.length) firstActive = 0; } }; ParticlePool.prototype.draw = function (context, image) { // draw active particles if (firstActive < firstFree) { for (i = firstActive; i < firstFree; i++) particles[i].draw(context, image); } if (firstFree < firstActive) { for (i = firstActive; i < particles.length; i++) particles[i].draw(context, image); for (i = 0; i < firstFree; i++) particles[i].draw(context, image); } }; return ParticlePool; })(); /* * Putting it all together */ (function (canvas) { var context = canvas.getContext('2d'), particles = new ParticlePool(settings.particles.length), particleRate = settings.particles.length / settings.particles.duration, // particles/sec time; // get point on heart with -PI","link":"/love.html"},{"title":"about","text":"&emsp;总想记录点什么。自己见过、听过、体验过的，一些好玩的，做砸的，期待着的。生活有时灰暗无光，有时也有意思。愿自己偶尔翻阅，能够朝花夕拾。","link":"/about/index.html"}]}